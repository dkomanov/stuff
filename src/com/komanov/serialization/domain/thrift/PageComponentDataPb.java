/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.komanov.serialization.domain.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-15")
public class PageComponentDataPb implements org.apache.thrift.TBase<PageComponentDataPb, PageComponentDataPb._Fields>, java.io.Serializable, Cloneable, Comparable<PageComponentDataPb> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PageComponentDataPb");

  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField BUTTON_FIELD_DESC = new org.apache.thrift.protocol.TField("button", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField BLOG_FIELD_DESC = new org.apache.thrift.protocol.TField("blog", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PageComponentDataPbStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PageComponentDataPbTupleSchemeFactory());
  }

  public TextComponentDataPb text; // optional
  public ButtonComponentDataPb button; // optional
  public BlogComponentDataPb blog; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEXT((short)1, "text"),
    BUTTON((short)2, "button"),
    BLOG((short)3, "blog");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEXT
          return TEXT;
        case 2: // BUTTON
          return BUTTON;
        case 3: // BLOG
          return BLOG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TEXT,_Fields.BUTTON,_Fields.BLOG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TextComponentDataPb.class)));
    tmpMap.put(_Fields.BUTTON, new org.apache.thrift.meta_data.FieldMetaData("button", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ButtonComponentDataPb.class)));
    tmpMap.put(_Fields.BLOG, new org.apache.thrift.meta_data.FieldMetaData("blog", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BlogComponentDataPb.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PageComponentDataPb.class, metaDataMap);
  }

  public PageComponentDataPb() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PageComponentDataPb(PageComponentDataPb other) {
    if (other.isSetText()) {
      this.text = new TextComponentDataPb(other.text);
    }
    if (other.isSetButton()) {
      this.button = new ButtonComponentDataPb(other.button);
    }
    if (other.isSetBlog()) {
      this.blog = new BlogComponentDataPb(other.blog);
    }
  }

  public PageComponentDataPb deepCopy() {
    return new PageComponentDataPb(this);
  }

  @Override
  public void clear() {
    this.text = null;
    this.button = null;
    this.blog = null;
  }

  public TextComponentDataPb getText() {
    return this.text;
  }

  public PageComponentDataPb setText(TextComponentDataPb text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  public ButtonComponentDataPb getButton() {
    return this.button;
  }

  public PageComponentDataPb setButton(ButtonComponentDataPb button) {
    this.button = button;
    return this;
  }

  public void unsetButton() {
    this.button = null;
  }

  /** Returns true if field button is set (has been assigned a value) and false otherwise */
  public boolean isSetButton() {
    return this.button != null;
  }

  public void setButtonIsSet(boolean value) {
    if (!value) {
      this.button = null;
    }
  }

  public BlogComponentDataPb getBlog() {
    return this.blog;
  }

  public PageComponentDataPb setBlog(BlogComponentDataPb blog) {
    this.blog = blog;
    return this;
  }

  public void unsetBlog() {
    this.blog = null;
  }

  /** Returns true if field blog is set (has been assigned a value) and false otherwise */
  public boolean isSetBlog() {
    return this.blog != null;
  }

  public void setBlogIsSet(boolean value) {
    if (!value) {
      this.blog = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((TextComponentDataPb)value);
      }
      break;

    case BUTTON:
      if (value == null) {
        unsetButton();
      } else {
        setButton((ButtonComponentDataPb)value);
      }
      break;

    case BLOG:
      if (value == null) {
        unsetBlog();
      } else {
        setBlog((BlogComponentDataPb)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEXT:
      return getText();

    case BUTTON:
      return getButton();

    case BLOG:
      return getBlog();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEXT:
      return isSetText();
    case BUTTON:
      return isSetButton();
    case BLOG:
      return isSetBlog();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PageComponentDataPb)
      return this.equals((PageComponentDataPb)that);
    return false;
  }

  public boolean equals(PageComponentDataPb that) {
    if (that == null)
      return false;

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_button = true && this.isSetButton();
    boolean that_present_button = true && that.isSetButton();
    if (this_present_button || that_present_button) {
      if (!(this_present_button && that_present_button))
        return false;
      if (!this.button.equals(that.button))
        return false;
    }

    boolean this_present_blog = true && this.isSetBlog();
    boolean that_present_blog = true && that.isSetBlog();
    if (this_present_blog || that_present_blog) {
      if (!(this_present_blog && that_present_blog))
        return false;
      if (!this.blog.equals(that.blog))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_text = true && (isSetText());
    list.add(present_text);
    if (present_text)
      list.add(text);

    boolean present_button = true && (isSetButton());
    list.add(present_button);
    if (present_button)
      list.add(button);

    boolean present_blog = true && (isSetBlog());
    list.add(present_blog);
    if (present_blog)
      list.add(blog);

    return list.hashCode();
  }

  @Override
  public int compareTo(PageComponentDataPb other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetText()).compareTo(other.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetButton()).compareTo(other.isSetButton());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetButton()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.button, other.button);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlog()).compareTo(other.isSetBlog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blog, other.blog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PageComponentDataPb(");
    boolean first = true;

    if (isSetText()) {
      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
    }
    if (isSetButton()) {
      if (!first) sb.append(", ");
      sb.append("button:");
      if (this.button == null) {
        sb.append("null");
      } else {
        sb.append(this.button);
      }
      first = false;
    }
    if (isSetBlog()) {
      if (!first) sb.append(", ");
      sb.append("blog:");
      if (this.blog == null) {
        sb.append("null");
      } else {
        sb.append(this.blog);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (text != null) {
      text.validate();
    }
    if (button != null) {
      button.validate();
    }
    if (blog != null) {
      blog.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PageComponentDataPbStandardSchemeFactory implements SchemeFactory {
    public PageComponentDataPbStandardScheme getScheme() {
      return new PageComponentDataPbStandardScheme();
    }
  }

  private static class PageComponentDataPbStandardScheme extends StandardScheme<PageComponentDataPb> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PageComponentDataPb struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.text = new TextComponentDataPb();
              struct.text.read(iprot);
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BUTTON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.button = new ButtonComponentDataPb();
              struct.button.read(iprot);
              struct.setButtonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BLOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.blog = new BlogComponentDataPb();
              struct.blog.read(iprot);
              struct.setBlogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PageComponentDataPb struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.text != null) {
        if (struct.isSetText()) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          struct.text.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.button != null) {
        if (struct.isSetButton()) {
          oprot.writeFieldBegin(BUTTON_FIELD_DESC);
          struct.button.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.blog != null) {
        if (struct.isSetBlog()) {
          oprot.writeFieldBegin(BLOG_FIELD_DESC);
          struct.blog.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PageComponentDataPbTupleSchemeFactory implements SchemeFactory {
    public PageComponentDataPbTupleScheme getScheme() {
      return new PageComponentDataPbTupleScheme();
    }
  }

  private static class PageComponentDataPbTupleScheme extends TupleScheme<PageComponentDataPb> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PageComponentDataPb struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetText()) {
        optionals.set(0);
      }
      if (struct.isSetButton()) {
        optionals.set(1);
      }
      if (struct.isSetBlog()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetText()) {
        struct.text.write(oprot);
      }
      if (struct.isSetButton()) {
        struct.button.write(oprot);
      }
      if (struct.isSetBlog()) {
        struct.blog.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PageComponentDataPb struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.text = new TextComponentDataPb();
        struct.text.read(iprot);
        struct.setTextIsSet(true);
      }
      if (incoming.get(1)) {
        struct.button = new ButtonComponentDataPb();
        struct.button.read(iprot);
        struct.setButtonIsSet(true);
      }
      if (incoming.get(2)) {
        struct.blog = new BlogComponentDataPb();
        struct.blog.read(iprot);
        struct.setBlogIsSet(true);
      }
    }
  }

}

