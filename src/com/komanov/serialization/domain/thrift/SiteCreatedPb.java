/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.komanov.serialization.domain.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-08-14")
public class SiteCreatedPb implements org.apache.thrift.TBase<SiteCreatedPb, SiteCreatedPb._Fields>, java.io.Serializable, Cloneable, Comparable<SiteCreatedPb> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SiteCreatedPb");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OWNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SITE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("siteType", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SiteCreatedPbStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SiteCreatedPbTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer id; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer ownerId; // optional
  /**
   * 
   * @see SiteTypePb
   */
  public @org.apache.thrift.annotation.Nullable SiteTypePb siteType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    OWNER_ID((short)2, "ownerId"),
    /**
     * 
     * @see SiteTypePb
     */
    SITE_TYPE((short)3, "siteType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // OWNER_ID
          return OWNER_ID;
        case 3: // SITE_TYPE
          return SITE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ID,_Fields.OWNER_ID,_Fields.SITE_TYPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.OWNER_ID, new org.apache.thrift.meta_data.FieldMetaData("ownerId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SITE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("siteType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SiteTypePb.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SiteCreatedPb.class, metaDataMap);
  }

  public SiteCreatedPb() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SiteCreatedPb(SiteCreatedPb other) {
    if (other.isSetId()) {
      this.id = org.apache.thrift.TBaseHelper.copyBinary(other.id);
    }
    if (other.isSetOwnerId()) {
      this.ownerId = org.apache.thrift.TBaseHelper.copyBinary(other.ownerId);
    }
    if (other.isSetSiteType()) {
      this.siteType = other.siteType;
    }
  }

  public SiteCreatedPb deepCopy() {
    return new SiteCreatedPb(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.ownerId = null;
    this.siteType = null;
  }

  public byte[] getId() {
    setId(org.apache.thrift.TBaseHelper.rightSize(id));
    return id == null ? null : id.array();
  }

  public java.nio.ByteBuffer bufferForId() {
    return org.apache.thrift.TBaseHelper.copyBinary(id);
  }

  public SiteCreatedPb setId(byte[] id) {
    this.id = id == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(id.clone());
    return this;
  }

  public SiteCreatedPb setId(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer id) {
    this.id = org.apache.thrift.TBaseHelper.copyBinary(id);
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public byte[] getOwnerId() {
    setOwnerId(org.apache.thrift.TBaseHelper.rightSize(ownerId));
    return ownerId == null ? null : ownerId.array();
  }

  public java.nio.ByteBuffer bufferForOwnerId() {
    return org.apache.thrift.TBaseHelper.copyBinary(ownerId);
  }

  public SiteCreatedPb setOwnerId(byte[] ownerId) {
    this.ownerId = ownerId == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(ownerId.clone());
    return this;
  }

  public SiteCreatedPb setOwnerId(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer ownerId) {
    this.ownerId = org.apache.thrift.TBaseHelper.copyBinary(ownerId);
    return this;
  }

  public void unsetOwnerId() {
    this.ownerId = null;
  }

  /** Returns true if field ownerId is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnerId() {
    return this.ownerId != null;
  }

  public void setOwnerIdIsSet(boolean value) {
    if (!value) {
      this.ownerId = null;
    }
  }

  /**
   * 
   * @see SiteTypePb
   */
  @org.apache.thrift.annotation.Nullable
  public SiteTypePb getSiteType() {
    return this.siteType;
  }

  /**
   * 
   * @see SiteTypePb
   */
  public SiteCreatedPb setSiteType(@org.apache.thrift.annotation.Nullable SiteTypePb siteType) {
    this.siteType = siteType;
    return this;
  }

  public void unsetSiteType() {
    this.siteType = null;
  }

  /** Returns true if field siteType is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteType() {
    return this.siteType != null;
  }

  public void setSiteTypeIsSet(boolean value) {
    if (!value) {
      this.siteType = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        if (value instanceof byte[]) {
          setId((byte[])value);
        } else {
          setId((java.nio.ByteBuffer)value);
        }
      }
      break;

    case OWNER_ID:
      if (value == null) {
        unsetOwnerId();
      } else {
        if (value instanceof byte[]) {
          setOwnerId((byte[])value);
        } else {
          setOwnerId((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SITE_TYPE:
      if (value == null) {
        unsetSiteType();
      } else {
        setSiteType((SiteTypePb)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case OWNER_ID:
      return getOwnerId();

    case SITE_TYPE:
      return getSiteType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case OWNER_ID:
      return isSetOwnerId();
    case SITE_TYPE:
      return isSetSiteType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SiteCreatedPb)
      return this.equals((SiteCreatedPb)that);
    return false;
  }

  public boolean equals(SiteCreatedPb that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_ownerId = true && this.isSetOwnerId();
    boolean that_present_ownerId = true && that.isSetOwnerId();
    if (this_present_ownerId || that_present_ownerId) {
      if (!(this_present_ownerId && that_present_ownerId))
        return false;
      if (!this.ownerId.equals(that.ownerId))
        return false;
    }

    boolean this_present_siteType = true && this.isSetSiteType();
    boolean that_present_siteType = true && that.isSetSiteType();
    if (this_present_siteType || that_present_siteType) {
      if (!(this_present_siteType && that_present_siteType))
        return false;
      if (!this.siteType.equals(that.siteType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetOwnerId()) ? 131071 : 524287);
    if (isSetOwnerId())
      hashCode = hashCode * 8191 + ownerId.hashCode();

    hashCode = hashCode * 8191 + ((isSetSiteType()) ? 131071 : 524287);
    if (isSetSiteType())
      hashCode = hashCode * 8191 + siteType.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(SiteCreatedPb other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOwnerId(), other.isSetOwnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerId, other.ownerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSiteType(), other.isSetSiteType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteType, other.siteType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SiteCreatedPb(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.id, sb);
      }
      first = false;
    }
    if (isSetOwnerId()) {
      if (!first) sb.append(", ");
      sb.append("ownerId:");
      if (this.ownerId == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.ownerId, sb);
      }
      first = false;
    }
    if (isSetSiteType()) {
      if (!first) sb.append(", ");
      sb.append("siteType:");
      if (this.siteType == null) {
        sb.append("null");
      } else {
        sb.append(this.siteType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SiteCreatedPbStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SiteCreatedPbStandardScheme getScheme() {
      return new SiteCreatedPbStandardScheme();
    }
  }

  private static class SiteCreatedPbStandardScheme extends org.apache.thrift.scheme.StandardScheme<SiteCreatedPb> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SiteCreatedPb struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readBinary();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OWNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ownerId = iprot.readBinary();
              struct.setOwnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SITE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.siteType = com.komanov.serialization.domain.thrift.SiteTypePb.findByValue(iprot.readI32());
              struct.setSiteTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SiteCreatedPb struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeBinary(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ownerId != null) {
        if (struct.isSetOwnerId()) {
          oprot.writeFieldBegin(OWNER_ID_FIELD_DESC);
          oprot.writeBinary(struct.ownerId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.siteType != null) {
        if (struct.isSetSiteType()) {
          oprot.writeFieldBegin(SITE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.siteType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SiteCreatedPbTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SiteCreatedPbTupleScheme getScheme() {
      return new SiteCreatedPbTupleScheme();
    }
  }

  private static class SiteCreatedPbTupleScheme extends org.apache.thrift.scheme.TupleScheme<SiteCreatedPb> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SiteCreatedPb struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetOwnerId()) {
        optionals.set(1);
      }
      if (struct.isSetSiteType()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetId()) {
        oprot.writeBinary(struct.id);
      }
      if (struct.isSetOwnerId()) {
        oprot.writeBinary(struct.ownerId);
      }
      if (struct.isSetSiteType()) {
        oprot.writeI32(struct.siteType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SiteCreatedPb struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.id = iprot.readBinary();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ownerId = iprot.readBinary();
        struct.setOwnerIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.siteType = com.komanov.serialization.domain.thrift.SiteTypePb.findByValue(iprot.readI32());
        struct.setSiteTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

