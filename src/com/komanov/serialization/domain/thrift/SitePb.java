/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.komanov.serialization.domain.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-15")
public class SitePb implements org.apache.thrift.TBase<SitePb, SitePb._Fields>, java.io.Serializable, Cloneable, Comparable<SitePb> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SitePb");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OWNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REVISION_FIELD_DESC = new org.apache.thrift.protocol.TField("revision", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SITE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("siteType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DOMAINS_FIELD_DESC = new org.apache.thrift.protocol.TField("domains", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField DEFAULT_META_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultMetaTags", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField PAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("pages", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField ENTRY_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("entryPoints", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField PUBLISHED_FIELD_DESC = new org.apache.thrift.protocol.TField("published", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField DATE_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("dateCreated", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField DATE_UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField("dateUpdated", org.apache.thrift.protocol.TType.I64, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SitePbStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SitePbTupleSchemeFactory());
  }

  public ByteBuffer id; // optional
  public ByteBuffer ownerId; // optional
  public long revision; // optional
  /**
   * 
   * @see SiteTypePb
   */
  public SiteTypePb siteType; // optional
  public List<SiteFlagPb> flags; // optional
  public String name; // optional
  public String description; // optional
  public List<DomainPb> domains; // optional
  public List<MetaTagPb> defaultMetaTags; // optional
  public List<PagePb> pages; // optional
  public List<EntryPointPb> entryPoints; // optional
  public boolean published; // optional
  public long dateCreated; // optional
  public long dateUpdated; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    OWNER_ID((short)2, "ownerId"),
    REVISION((short)3, "revision"),
    /**
     * 
     * @see SiteTypePb
     */
    SITE_TYPE((short)4, "siteType"),
    FLAGS((short)5, "flags"),
    NAME((short)6, "name"),
    DESCRIPTION((short)7, "description"),
    DOMAINS((short)8, "domains"),
    DEFAULT_META_TAGS((short)9, "defaultMetaTags"),
    PAGES((short)10, "pages"),
    ENTRY_POINTS((short)11, "entryPoints"),
    PUBLISHED((short)12, "published"),
    DATE_CREATED((short)13, "dateCreated"),
    DATE_UPDATED((short)14, "dateUpdated");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // OWNER_ID
          return OWNER_ID;
        case 3: // REVISION
          return REVISION;
        case 4: // SITE_TYPE
          return SITE_TYPE;
        case 5: // FLAGS
          return FLAGS;
        case 6: // NAME
          return NAME;
        case 7: // DESCRIPTION
          return DESCRIPTION;
        case 8: // DOMAINS
          return DOMAINS;
        case 9: // DEFAULT_META_TAGS
          return DEFAULT_META_TAGS;
        case 10: // PAGES
          return PAGES;
        case 11: // ENTRY_POINTS
          return ENTRY_POINTS;
        case 12: // PUBLISHED
          return PUBLISHED;
        case 13: // DATE_CREATED
          return DATE_CREATED;
        case 14: // DATE_UPDATED
          return DATE_UPDATED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REVISION_ISSET_ID = 0;
  private static final int __PUBLISHED_ISSET_ID = 1;
  private static final int __DATECREATED_ISSET_ID = 2;
  private static final int __DATEUPDATED_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.OWNER_ID,_Fields.REVISION,_Fields.SITE_TYPE,_Fields.FLAGS,_Fields.NAME,_Fields.DESCRIPTION,_Fields.DOMAINS,_Fields.DEFAULT_META_TAGS,_Fields.PAGES,_Fields.ENTRY_POINTS,_Fields.PUBLISHED,_Fields.DATE_CREATED,_Fields.DATE_UPDATED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.OWNER_ID, new org.apache.thrift.meta_data.FieldMetaData("ownerId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.REVISION, new org.apache.thrift.meta_data.FieldMetaData("revision", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SITE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("siteType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SiteTypePb.class)));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SiteFlagPb.class))));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOMAINS, new org.apache.thrift.meta_data.FieldMetaData("domains", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DomainPb.class))));
    tmpMap.put(_Fields.DEFAULT_META_TAGS, new org.apache.thrift.meta_data.FieldMetaData("defaultMetaTags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetaTagPb.class))));
    tmpMap.put(_Fields.PAGES, new org.apache.thrift.meta_data.FieldMetaData("pages", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PagePb.class))));
    tmpMap.put(_Fields.ENTRY_POINTS, new org.apache.thrift.meta_data.FieldMetaData("entryPoints", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EntryPointPb.class))));
    tmpMap.put(_Fields.PUBLISHED, new org.apache.thrift.meta_data.FieldMetaData("published", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DATE_CREATED, new org.apache.thrift.meta_data.FieldMetaData("dateCreated", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATE_UPDATED, new org.apache.thrift.meta_data.FieldMetaData("dateUpdated", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SitePb.class, metaDataMap);
  }

  public SitePb() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SitePb(SitePb other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = org.apache.thrift.TBaseHelper.copyBinary(other.id);
    }
    if (other.isSetOwnerId()) {
      this.ownerId = org.apache.thrift.TBaseHelper.copyBinary(other.ownerId);
    }
    this.revision = other.revision;
    if (other.isSetSiteType()) {
      this.siteType = other.siteType;
    }
    if (other.isSetFlags()) {
      List<SiteFlagPb> __this__flags = new ArrayList<SiteFlagPb>(other.flags.size());
      for (SiteFlagPb other_element : other.flags) {
        __this__flags.add(other_element);
      }
      this.flags = __this__flags;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetDomains()) {
      List<DomainPb> __this__domains = new ArrayList<DomainPb>(other.domains.size());
      for (DomainPb other_element : other.domains) {
        __this__domains.add(new DomainPb(other_element));
      }
      this.domains = __this__domains;
    }
    if (other.isSetDefaultMetaTags()) {
      List<MetaTagPb> __this__defaultMetaTags = new ArrayList<MetaTagPb>(other.defaultMetaTags.size());
      for (MetaTagPb other_element : other.defaultMetaTags) {
        __this__defaultMetaTags.add(new MetaTagPb(other_element));
      }
      this.defaultMetaTags = __this__defaultMetaTags;
    }
    if (other.isSetPages()) {
      List<PagePb> __this__pages = new ArrayList<PagePb>(other.pages.size());
      for (PagePb other_element : other.pages) {
        __this__pages.add(new PagePb(other_element));
      }
      this.pages = __this__pages;
    }
    if (other.isSetEntryPoints()) {
      List<EntryPointPb> __this__entryPoints = new ArrayList<EntryPointPb>(other.entryPoints.size());
      for (EntryPointPb other_element : other.entryPoints) {
        __this__entryPoints.add(new EntryPointPb(other_element));
      }
      this.entryPoints = __this__entryPoints;
    }
    this.published = other.published;
    this.dateCreated = other.dateCreated;
    this.dateUpdated = other.dateUpdated;
  }

  public SitePb deepCopy() {
    return new SitePb(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.ownerId = null;
    setRevisionIsSet(false);
    this.revision = 0;
    this.siteType = null;
    this.flags = null;
    this.name = null;
    this.description = null;
    this.domains = null;
    this.defaultMetaTags = null;
    this.pages = null;
    this.entryPoints = null;
    setPublishedIsSet(false);
    this.published = false;
    setDateCreatedIsSet(false);
    this.dateCreated = 0;
    setDateUpdatedIsSet(false);
    this.dateUpdated = 0;
  }

  public byte[] getId() {
    setId(org.apache.thrift.TBaseHelper.rightSize(id));
    return id == null ? null : id.array();
  }

  public ByteBuffer bufferForId() {
    return org.apache.thrift.TBaseHelper.copyBinary(id);
  }

  public SitePb setId(byte[] id) {
    this.id = id == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(id, id.length));
    return this;
  }

  public SitePb setId(ByteBuffer id) {
    this.id = org.apache.thrift.TBaseHelper.copyBinary(id);
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public byte[] getOwnerId() {
    setOwnerId(org.apache.thrift.TBaseHelper.rightSize(ownerId));
    return ownerId == null ? null : ownerId.array();
  }

  public ByteBuffer bufferForOwnerId() {
    return org.apache.thrift.TBaseHelper.copyBinary(ownerId);
  }

  public SitePb setOwnerId(byte[] ownerId) {
    this.ownerId = ownerId == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(ownerId, ownerId.length));
    return this;
  }

  public SitePb setOwnerId(ByteBuffer ownerId) {
    this.ownerId = org.apache.thrift.TBaseHelper.copyBinary(ownerId);
    return this;
  }

  public void unsetOwnerId() {
    this.ownerId = null;
  }

  /** Returns true if field ownerId is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnerId() {
    return this.ownerId != null;
  }

  public void setOwnerIdIsSet(boolean value) {
    if (!value) {
      this.ownerId = null;
    }
  }

  public long getRevision() {
    return this.revision;
  }

  public SitePb setRevision(long revision) {
    this.revision = revision;
    setRevisionIsSet(true);
    return this;
  }

  public void unsetRevision() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVISION_ISSET_ID);
  }

  /** Returns true if field revision is set (has been assigned a value) and false otherwise */
  public boolean isSetRevision() {
    return EncodingUtils.testBit(__isset_bitfield, __REVISION_ISSET_ID);
  }

  public void setRevisionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVISION_ISSET_ID, value);
  }

  /**
   * 
   * @see SiteTypePb
   */
  public SiteTypePb getSiteType() {
    return this.siteType;
  }

  /**
   * 
   * @see SiteTypePb
   */
  public SitePb setSiteType(SiteTypePb siteType) {
    this.siteType = siteType;
    return this;
  }

  public void unsetSiteType() {
    this.siteType = null;
  }

  /** Returns true if field siteType is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteType() {
    return this.siteType != null;
  }

  public void setSiteTypeIsSet(boolean value) {
    if (!value) {
      this.siteType = null;
    }
  }

  public int getFlagsSize() {
    return (this.flags == null) ? 0 : this.flags.size();
  }

  public java.util.Iterator<SiteFlagPb> getFlagsIterator() {
    return (this.flags == null) ? null : this.flags.iterator();
  }

  public void addToFlags(SiteFlagPb elem) {
    if (this.flags == null) {
      this.flags = new ArrayList<SiteFlagPb>();
    }
    this.flags.add(elem);
  }

  public List<SiteFlagPb> getFlags() {
    return this.flags;
  }

  public SitePb setFlags(List<SiteFlagPb> flags) {
    this.flags = flags;
    return this;
  }

  public void unsetFlags() {
    this.flags = null;
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return this.flags != null;
  }

  public void setFlagsIsSet(boolean value) {
    if (!value) {
      this.flags = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public SitePb setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public SitePb setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getDomainsSize() {
    return (this.domains == null) ? 0 : this.domains.size();
  }

  public java.util.Iterator<DomainPb> getDomainsIterator() {
    return (this.domains == null) ? null : this.domains.iterator();
  }

  public void addToDomains(DomainPb elem) {
    if (this.domains == null) {
      this.domains = new ArrayList<DomainPb>();
    }
    this.domains.add(elem);
  }

  public List<DomainPb> getDomains() {
    return this.domains;
  }

  public SitePb setDomains(List<DomainPb> domains) {
    this.domains = domains;
    return this;
  }

  public void unsetDomains() {
    this.domains = null;
  }

  /** Returns true if field domains is set (has been assigned a value) and false otherwise */
  public boolean isSetDomains() {
    return this.domains != null;
  }

  public void setDomainsIsSet(boolean value) {
    if (!value) {
      this.domains = null;
    }
  }

  public int getDefaultMetaTagsSize() {
    return (this.defaultMetaTags == null) ? 0 : this.defaultMetaTags.size();
  }

  public java.util.Iterator<MetaTagPb> getDefaultMetaTagsIterator() {
    return (this.defaultMetaTags == null) ? null : this.defaultMetaTags.iterator();
  }

  public void addToDefaultMetaTags(MetaTagPb elem) {
    if (this.defaultMetaTags == null) {
      this.defaultMetaTags = new ArrayList<MetaTagPb>();
    }
    this.defaultMetaTags.add(elem);
  }

  public List<MetaTagPb> getDefaultMetaTags() {
    return this.defaultMetaTags;
  }

  public SitePb setDefaultMetaTags(List<MetaTagPb> defaultMetaTags) {
    this.defaultMetaTags = defaultMetaTags;
    return this;
  }

  public void unsetDefaultMetaTags() {
    this.defaultMetaTags = null;
  }

  /** Returns true if field defaultMetaTags is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultMetaTags() {
    return this.defaultMetaTags != null;
  }

  public void setDefaultMetaTagsIsSet(boolean value) {
    if (!value) {
      this.defaultMetaTags = null;
    }
  }

  public int getPagesSize() {
    return (this.pages == null) ? 0 : this.pages.size();
  }

  public java.util.Iterator<PagePb> getPagesIterator() {
    return (this.pages == null) ? null : this.pages.iterator();
  }

  public void addToPages(PagePb elem) {
    if (this.pages == null) {
      this.pages = new ArrayList<PagePb>();
    }
    this.pages.add(elem);
  }

  public List<PagePb> getPages() {
    return this.pages;
  }

  public SitePb setPages(List<PagePb> pages) {
    this.pages = pages;
    return this;
  }

  public void unsetPages() {
    this.pages = null;
  }

  /** Returns true if field pages is set (has been assigned a value) and false otherwise */
  public boolean isSetPages() {
    return this.pages != null;
  }

  public void setPagesIsSet(boolean value) {
    if (!value) {
      this.pages = null;
    }
  }

  public int getEntryPointsSize() {
    return (this.entryPoints == null) ? 0 : this.entryPoints.size();
  }

  public java.util.Iterator<EntryPointPb> getEntryPointsIterator() {
    return (this.entryPoints == null) ? null : this.entryPoints.iterator();
  }

  public void addToEntryPoints(EntryPointPb elem) {
    if (this.entryPoints == null) {
      this.entryPoints = new ArrayList<EntryPointPb>();
    }
    this.entryPoints.add(elem);
  }

  public List<EntryPointPb> getEntryPoints() {
    return this.entryPoints;
  }

  public SitePb setEntryPoints(List<EntryPointPb> entryPoints) {
    this.entryPoints = entryPoints;
    return this;
  }

  public void unsetEntryPoints() {
    this.entryPoints = null;
  }

  /** Returns true if field entryPoints is set (has been assigned a value) and false otherwise */
  public boolean isSetEntryPoints() {
    return this.entryPoints != null;
  }

  public void setEntryPointsIsSet(boolean value) {
    if (!value) {
      this.entryPoints = null;
    }
  }

  public boolean isPublished() {
    return this.published;
  }

  public SitePb setPublished(boolean published) {
    this.published = published;
    setPublishedIsSet(true);
    return this;
  }

  public void unsetPublished() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLISHED_ISSET_ID);
  }

  /** Returns true if field published is set (has been assigned a value) and false otherwise */
  public boolean isSetPublished() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLISHED_ISSET_ID);
  }

  public void setPublishedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLISHED_ISSET_ID, value);
  }

  public long getDateCreated() {
    return this.dateCreated;
  }

  public SitePb setDateCreated(long dateCreated) {
    this.dateCreated = dateCreated;
    setDateCreatedIsSet(true);
    return this;
  }

  public void unsetDateCreated() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATECREATED_ISSET_ID);
  }

  /** Returns true if field dateCreated is set (has been assigned a value) and false otherwise */
  public boolean isSetDateCreated() {
    return EncodingUtils.testBit(__isset_bitfield, __DATECREATED_ISSET_ID);
  }

  public void setDateCreatedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATECREATED_ISSET_ID, value);
  }

  public long getDateUpdated() {
    return this.dateUpdated;
  }

  public SitePb setDateUpdated(long dateUpdated) {
    this.dateUpdated = dateUpdated;
    setDateUpdatedIsSet(true);
    return this;
  }

  public void unsetDateUpdated() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATEUPDATED_ISSET_ID);
  }

  /** Returns true if field dateUpdated is set (has been assigned a value) and false otherwise */
  public boolean isSetDateUpdated() {
    return EncodingUtils.testBit(__isset_bitfield, __DATEUPDATED_ISSET_ID);
  }

  public void setDateUpdatedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATEUPDATED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((ByteBuffer)value);
      }
      break;

    case OWNER_ID:
      if (value == null) {
        unsetOwnerId();
      } else {
        setOwnerId((ByteBuffer)value);
      }
      break;

    case REVISION:
      if (value == null) {
        unsetRevision();
      } else {
        setRevision((Long)value);
      }
      break;

    case SITE_TYPE:
      if (value == null) {
        unsetSiteType();
      } else {
        setSiteType((SiteTypePb)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((List<SiteFlagPb>)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case DOMAINS:
      if (value == null) {
        unsetDomains();
      } else {
        setDomains((List<DomainPb>)value);
      }
      break;

    case DEFAULT_META_TAGS:
      if (value == null) {
        unsetDefaultMetaTags();
      } else {
        setDefaultMetaTags((List<MetaTagPb>)value);
      }
      break;

    case PAGES:
      if (value == null) {
        unsetPages();
      } else {
        setPages((List<PagePb>)value);
      }
      break;

    case ENTRY_POINTS:
      if (value == null) {
        unsetEntryPoints();
      } else {
        setEntryPoints((List<EntryPointPb>)value);
      }
      break;

    case PUBLISHED:
      if (value == null) {
        unsetPublished();
      } else {
        setPublished((Boolean)value);
      }
      break;

    case DATE_CREATED:
      if (value == null) {
        unsetDateCreated();
      } else {
        setDateCreated((Long)value);
      }
      break;

    case DATE_UPDATED:
      if (value == null) {
        unsetDateUpdated();
      } else {
        setDateUpdated((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case OWNER_ID:
      return getOwnerId();

    case REVISION:
      return getRevision();

    case SITE_TYPE:
      return getSiteType();

    case FLAGS:
      return getFlags();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case DOMAINS:
      return getDomains();

    case DEFAULT_META_TAGS:
      return getDefaultMetaTags();

    case PAGES:
      return getPages();

    case ENTRY_POINTS:
      return getEntryPoints();

    case PUBLISHED:
      return isPublished();

    case DATE_CREATED:
      return getDateCreated();

    case DATE_UPDATED:
      return getDateUpdated();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case OWNER_ID:
      return isSetOwnerId();
    case REVISION:
      return isSetRevision();
    case SITE_TYPE:
      return isSetSiteType();
    case FLAGS:
      return isSetFlags();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case DOMAINS:
      return isSetDomains();
    case DEFAULT_META_TAGS:
      return isSetDefaultMetaTags();
    case PAGES:
      return isSetPages();
    case ENTRY_POINTS:
      return isSetEntryPoints();
    case PUBLISHED:
      return isSetPublished();
    case DATE_CREATED:
      return isSetDateCreated();
    case DATE_UPDATED:
      return isSetDateUpdated();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SitePb)
      return this.equals((SitePb)that);
    return false;
  }

  public boolean equals(SitePb that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_ownerId = true && this.isSetOwnerId();
    boolean that_present_ownerId = true && that.isSetOwnerId();
    if (this_present_ownerId || that_present_ownerId) {
      if (!(this_present_ownerId && that_present_ownerId))
        return false;
      if (!this.ownerId.equals(that.ownerId))
        return false;
    }

    boolean this_present_revision = true && this.isSetRevision();
    boolean that_present_revision = true && that.isSetRevision();
    if (this_present_revision || that_present_revision) {
      if (!(this_present_revision && that_present_revision))
        return false;
      if (this.revision != that.revision)
        return false;
    }

    boolean this_present_siteType = true && this.isSetSiteType();
    boolean that_present_siteType = true && that.isSetSiteType();
    if (this_present_siteType || that_present_siteType) {
      if (!(this_present_siteType && that_present_siteType))
        return false;
      if (!this.siteType.equals(that.siteType))
        return false;
    }

    boolean this_present_flags = true && this.isSetFlags();
    boolean that_present_flags = true && that.isSetFlags();
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (!this.flags.equals(that.flags))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_domains = true && this.isSetDomains();
    boolean that_present_domains = true && that.isSetDomains();
    if (this_present_domains || that_present_domains) {
      if (!(this_present_domains && that_present_domains))
        return false;
      if (!this.domains.equals(that.domains))
        return false;
    }

    boolean this_present_defaultMetaTags = true && this.isSetDefaultMetaTags();
    boolean that_present_defaultMetaTags = true && that.isSetDefaultMetaTags();
    if (this_present_defaultMetaTags || that_present_defaultMetaTags) {
      if (!(this_present_defaultMetaTags && that_present_defaultMetaTags))
        return false;
      if (!this.defaultMetaTags.equals(that.defaultMetaTags))
        return false;
    }

    boolean this_present_pages = true && this.isSetPages();
    boolean that_present_pages = true && that.isSetPages();
    if (this_present_pages || that_present_pages) {
      if (!(this_present_pages && that_present_pages))
        return false;
      if (!this.pages.equals(that.pages))
        return false;
    }

    boolean this_present_entryPoints = true && this.isSetEntryPoints();
    boolean that_present_entryPoints = true && that.isSetEntryPoints();
    if (this_present_entryPoints || that_present_entryPoints) {
      if (!(this_present_entryPoints && that_present_entryPoints))
        return false;
      if (!this.entryPoints.equals(that.entryPoints))
        return false;
    }

    boolean this_present_published = true && this.isSetPublished();
    boolean that_present_published = true && that.isSetPublished();
    if (this_present_published || that_present_published) {
      if (!(this_present_published && that_present_published))
        return false;
      if (this.published != that.published)
        return false;
    }

    boolean this_present_dateCreated = true && this.isSetDateCreated();
    boolean that_present_dateCreated = true && that.isSetDateCreated();
    if (this_present_dateCreated || that_present_dateCreated) {
      if (!(this_present_dateCreated && that_present_dateCreated))
        return false;
      if (this.dateCreated != that.dateCreated)
        return false;
    }

    boolean this_present_dateUpdated = true && this.isSetDateUpdated();
    boolean that_present_dateUpdated = true && that.isSetDateUpdated();
    if (this_present_dateUpdated || that_present_dateUpdated) {
      if (!(this_present_dateUpdated && that_present_dateUpdated))
        return false;
      if (this.dateUpdated != that.dateUpdated)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_ownerId = true && (isSetOwnerId());
    list.add(present_ownerId);
    if (present_ownerId)
      list.add(ownerId);

    boolean present_revision = true && (isSetRevision());
    list.add(present_revision);
    if (present_revision)
      list.add(revision);

    boolean present_siteType = true && (isSetSiteType());
    list.add(present_siteType);
    if (present_siteType)
      list.add(siteType.getValue());

    boolean present_flags = true && (isSetFlags());
    list.add(present_flags);
    if (present_flags)
      list.add(flags);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_domains = true && (isSetDomains());
    list.add(present_domains);
    if (present_domains)
      list.add(domains);

    boolean present_defaultMetaTags = true && (isSetDefaultMetaTags());
    list.add(present_defaultMetaTags);
    if (present_defaultMetaTags)
      list.add(defaultMetaTags);

    boolean present_pages = true && (isSetPages());
    list.add(present_pages);
    if (present_pages)
      list.add(pages);

    boolean present_entryPoints = true && (isSetEntryPoints());
    list.add(present_entryPoints);
    if (present_entryPoints)
      list.add(entryPoints);

    boolean present_published = true && (isSetPublished());
    list.add(present_published);
    if (present_published)
      list.add(published);

    boolean present_dateCreated = true && (isSetDateCreated());
    list.add(present_dateCreated);
    if (present_dateCreated)
      list.add(dateCreated);

    boolean present_dateUpdated = true && (isSetDateUpdated());
    list.add(present_dateUpdated);
    if (present_dateUpdated)
      list.add(dateUpdated);

    return list.hashCode();
  }

  @Override
  public int compareTo(SitePb other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwnerId()).compareTo(other.isSetOwnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerId, other.ownerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRevision()).compareTo(other.isSetRevision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.revision, other.revision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteType()).compareTo(other.isSetSiteType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteType, other.siteType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlags()).compareTo(other.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDomains()).compareTo(other.isSetDomains());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomains()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domains, other.domains);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultMetaTags()).compareTo(other.isSetDefaultMetaTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultMetaTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultMetaTags, other.defaultMetaTags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPages()).compareTo(other.isSetPages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pages, other.pages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntryPoints()).compareTo(other.isSetEntryPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntryPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryPoints, other.entryPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublished()).compareTo(other.isSetPublished());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublished()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.published, other.published);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateCreated()).compareTo(other.isSetDateCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateCreated, other.dateCreated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateUpdated()).compareTo(other.isSetDateUpdated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateUpdated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateUpdated, other.dateUpdated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SitePb(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.id, sb);
      }
      first = false;
    }
    if (isSetOwnerId()) {
      if (!first) sb.append(", ");
      sb.append("ownerId:");
      if (this.ownerId == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.ownerId, sb);
      }
      first = false;
    }
    if (isSetRevision()) {
      if (!first) sb.append(", ");
      sb.append("revision:");
      sb.append(this.revision);
      first = false;
    }
    if (isSetSiteType()) {
      if (!first) sb.append(", ");
      sb.append("siteType:");
      if (this.siteType == null) {
        sb.append("null");
      } else {
        sb.append(this.siteType);
      }
      first = false;
    }
    if (isSetFlags()) {
      if (!first) sb.append(", ");
      sb.append("flags:");
      if (this.flags == null) {
        sb.append("null");
      } else {
        sb.append(this.flags);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetDomains()) {
      if (!first) sb.append(", ");
      sb.append("domains:");
      if (this.domains == null) {
        sb.append("null");
      } else {
        sb.append(this.domains);
      }
      first = false;
    }
    if (isSetDefaultMetaTags()) {
      if (!first) sb.append(", ");
      sb.append("defaultMetaTags:");
      if (this.defaultMetaTags == null) {
        sb.append("null");
      } else {
        sb.append(this.defaultMetaTags);
      }
      first = false;
    }
    if (isSetPages()) {
      if (!first) sb.append(", ");
      sb.append("pages:");
      if (this.pages == null) {
        sb.append("null");
      } else {
        sb.append(this.pages);
      }
      first = false;
    }
    if (isSetEntryPoints()) {
      if (!first) sb.append(", ");
      sb.append("entryPoints:");
      if (this.entryPoints == null) {
        sb.append("null");
      } else {
        sb.append(this.entryPoints);
      }
      first = false;
    }
    if (isSetPublished()) {
      if (!first) sb.append(", ");
      sb.append("published:");
      sb.append(this.published);
      first = false;
    }
    if (isSetDateCreated()) {
      if (!first) sb.append(", ");
      sb.append("dateCreated:");
      sb.append(this.dateCreated);
      first = false;
    }
    if (isSetDateUpdated()) {
      if (!first) sb.append(", ");
      sb.append("dateUpdated:");
      sb.append(this.dateUpdated);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SitePbStandardSchemeFactory implements SchemeFactory {
    public SitePbStandardScheme getScheme() {
      return new SitePbStandardScheme();
    }
  }

  private static class SitePbStandardScheme extends StandardScheme<SitePb> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SitePb struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readBinary();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OWNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ownerId = iprot.readBinary();
              struct.setOwnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REVISION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.revision = iprot.readI64();
              struct.setRevisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SITE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.siteType = com.komanov.serialization.domain.thrift.SiteTypePb.findByValue(iprot.readI32());
              struct.setSiteTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.flags = new ArrayList<SiteFlagPb>(_list16.size);
                SiteFlagPb _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = com.komanov.serialization.domain.thrift.SiteFlagPb.findByValue(iprot.readI32());
                  struct.flags.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DOMAINS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.domains = new ArrayList<DomainPb>(_list19.size);
                DomainPb _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = new DomainPb();
                  _elem20.read(iprot);
                  struct.domains.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setDomainsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DEFAULT_META_TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct.defaultMetaTags = new ArrayList<MetaTagPb>(_list22.size);
                MetaTagPb _elem23;
                for (int _i24 = 0; _i24 < _list22.size; ++_i24)
                {
                  _elem23 = new MetaTagPb();
                  _elem23.read(iprot);
                  struct.defaultMetaTags.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setDefaultMetaTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list25 = iprot.readListBegin();
                struct.pages = new ArrayList<PagePb>(_list25.size);
                PagePb _elem26;
                for (int _i27 = 0; _i27 < _list25.size; ++_i27)
                {
                  _elem26 = new PagePb();
                  _elem26.read(iprot);
                  struct.pages.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setPagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ENTRY_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                struct.entryPoints = new ArrayList<EntryPointPb>(_list28.size);
                EntryPointPb _elem29;
                for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                {
                  _elem29 = new EntryPointPb();
                  _elem29.read(iprot);
                  struct.entryPoints.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setEntryPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PUBLISHED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.published = iprot.readBool();
              struct.setPublishedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DATE_CREATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dateCreated = iprot.readI64();
              struct.setDateCreatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DATE_UPDATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dateUpdated = iprot.readI64();
              struct.setDateUpdatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SitePb struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeBinary(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ownerId != null) {
        if (struct.isSetOwnerId()) {
          oprot.writeFieldBegin(OWNER_ID_FIELD_DESC);
          oprot.writeBinary(struct.ownerId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRevision()) {
        oprot.writeFieldBegin(REVISION_FIELD_DESC);
        oprot.writeI64(struct.revision);
        oprot.writeFieldEnd();
      }
      if (struct.siteType != null) {
        if (struct.isSetSiteType()) {
          oprot.writeFieldBegin(SITE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.siteType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.flags != null) {
        if (struct.isSetFlags()) {
          oprot.writeFieldBegin(FLAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.flags.size()));
            for (SiteFlagPb _iter31 : struct.flags)
            {
              oprot.writeI32(_iter31.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.domains != null) {
        if (struct.isSetDomains()) {
          oprot.writeFieldBegin(DOMAINS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.domains.size()));
            for (DomainPb _iter32 : struct.domains)
            {
              _iter32.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.defaultMetaTags != null) {
        if (struct.isSetDefaultMetaTags()) {
          oprot.writeFieldBegin(DEFAULT_META_TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.defaultMetaTags.size()));
            for (MetaTagPb _iter33 : struct.defaultMetaTags)
            {
              _iter33.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.pages != null) {
        if (struct.isSetPages()) {
          oprot.writeFieldBegin(PAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.pages.size()));
            for (PagePb _iter34 : struct.pages)
            {
              _iter34.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.entryPoints != null) {
        if (struct.isSetEntryPoints()) {
          oprot.writeFieldBegin(ENTRY_POINTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.entryPoints.size()));
            for (EntryPointPb _iter35 : struct.entryPoints)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPublished()) {
        oprot.writeFieldBegin(PUBLISHED_FIELD_DESC);
        oprot.writeBool(struct.published);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDateCreated()) {
        oprot.writeFieldBegin(DATE_CREATED_FIELD_DESC);
        oprot.writeI64(struct.dateCreated);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDateUpdated()) {
        oprot.writeFieldBegin(DATE_UPDATED_FIELD_DESC);
        oprot.writeI64(struct.dateUpdated);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SitePbTupleSchemeFactory implements SchemeFactory {
    public SitePbTupleScheme getScheme() {
      return new SitePbTupleScheme();
    }
  }

  private static class SitePbTupleScheme extends TupleScheme<SitePb> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SitePb struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetOwnerId()) {
        optionals.set(1);
      }
      if (struct.isSetRevision()) {
        optionals.set(2);
      }
      if (struct.isSetSiteType()) {
        optionals.set(3);
      }
      if (struct.isSetFlags()) {
        optionals.set(4);
      }
      if (struct.isSetName()) {
        optionals.set(5);
      }
      if (struct.isSetDescription()) {
        optionals.set(6);
      }
      if (struct.isSetDomains()) {
        optionals.set(7);
      }
      if (struct.isSetDefaultMetaTags()) {
        optionals.set(8);
      }
      if (struct.isSetPages()) {
        optionals.set(9);
      }
      if (struct.isSetEntryPoints()) {
        optionals.set(10);
      }
      if (struct.isSetPublished()) {
        optionals.set(11);
      }
      if (struct.isSetDateCreated()) {
        optionals.set(12);
      }
      if (struct.isSetDateUpdated()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetId()) {
        oprot.writeBinary(struct.id);
      }
      if (struct.isSetOwnerId()) {
        oprot.writeBinary(struct.ownerId);
      }
      if (struct.isSetRevision()) {
        oprot.writeI64(struct.revision);
      }
      if (struct.isSetSiteType()) {
        oprot.writeI32(struct.siteType.getValue());
      }
      if (struct.isSetFlags()) {
        {
          oprot.writeI32(struct.flags.size());
          for (SiteFlagPb _iter36 : struct.flags)
          {
            oprot.writeI32(_iter36.getValue());
          }
        }
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetDomains()) {
        {
          oprot.writeI32(struct.domains.size());
          for (DomainPb _iter37 : struct.domains)
          {
            _iter37.write(oprot);
          }
        }
      }
      if (struct.isSetDefaultMetaTags()) {
        {
          oprot.writeI32(struct.defaultMetaTags.size());
          for (MetaTagPb _iter38 : struct.defaultMetaTags)
          {
            _iter38.write(oprot);
          }
        }
      }
      if (struct.isSetPages()) {
        {
          oprot.writeI32(struct.pages.size());
          for (PagePb _iter39 : struct.pages)
          {
            _iter39.write(oprot);
          }
        }
      }
      if (struct.isSetEntryPoints()) {
        {
          oprot.writeI32(struct.entryPoints.size());
          for (EntryPointPb _iter40 : struct.entryPoints)
          {
            _iter40.write(oprot);
          }
        }
      }
      if (struct.isSetPublished()) {
        oprot.writeBool(struct.published);
      }
      if (struct.isSetDateCreated()) {
        oprot.writeI64(struct.dateCreated);
      }
      if (struct.isSetDateUpdated()) {
        oprot.writeI64(struct.dateUpdated);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SitePb struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.id = iprot.readBinary();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ownerId = iprot.readBinary();
        struct.setOwnerIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.revision = iprot.readI64();
        struct.setRevisionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.siteType = com.komanov.serialization.domain.thrift.SiteTypePb.findByValue(iprot.readI32());
        struct.setSiteTypeIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.flags = new ArrayList<SiteFlagPb>(_list41.size);
          SiteFlagPb _elem42;
          for (int _i43 = 0; _i43 < _list41.size; ++_i43)
          {
            _elem42 = com.komanov.serialization.domain.thrift.SiteFlagPb.findByValue(iprot.readI32());
            struct.flags.add(_elem42);
          }
        }
        struct.setFlagsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list44 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.domains = new ArrayList<DomainPb>(_list44.size);
          DomainPb _elem45;
          for (int _i46 = 0; _i46 < _list44.size; ++_i46)
          {
            _elem45 = new DomainPb();
            _elem45.read(iprot);
            struct.domains.add(_elem45);
          }
        }
        struct.setDomainsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.defaultMetaTags = new ArrayList<MetaTagPb>(_list47.size);
          MetaTagPb _elem48;
          for (int _i49 = 0; _i49 < _list47.size; ++_i49)
          {
            _elem48 = new MetaTagPb();
            _elem48.read(iprot);
            struct.defaultMetaTags.add(_elem48);
          }
        }
        struct.setDefaultMetaTagsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.pages = new ArrayList<PagePb>(_list50.size);
          PagePb _elem51;
          for (int _i52 = 0; _i52 < _list50.size; ++_i52)
          {
            _elem51 = new PagePb();
            _elem51.read(iprot);
            struct.pages.add(_elem51);
          }
        }
        struct.setPagesIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.entryPoints = new ArrayList<EntryPointPb>(_list53.size);
          EntryPointPb _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new EntryPointPb();
            _elem54.read(iprot);
            struct.entryPoints.add(_elem54);
          }
        }
        struct.setEntryPointsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.published = iprot.readBool();
        struct.setPublishedIsSet(true);
      }
      if (incoming.get(12)) {
        struct.dateCreated = iprot.readI64();
        struct.setDateCreatedIsSet(true);
      }
      if (incoming.get(13)) {
        struct.dateUpdated = iprot.readI64();
        struct.setDateUpdatedIsSet(true);
      }
    }
  }

}

