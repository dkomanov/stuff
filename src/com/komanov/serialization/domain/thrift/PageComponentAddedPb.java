/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.komanov.serialization.domain.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-15")
public class PageComponentAddedPb implements org.apache.thrift.TBase<PageComponentAddedPb, PageComponentAddedPb._Fields>, java.io.Serializable, Cloneable, Comparable<PageComponentAddedPb> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PageComponentAddedPb");

  private static final org.apache.thrift.protocol.TField PAGE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("pagePath", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMPONENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("componentType", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PageComponentAddedPbStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PageComponentAddedPbTupleSchemeFactory());
  }

  public String pagePath; // optional
  public ByteBuffer id; // optional
  /**
   * 
   * @see PageComponentTypePb
   */
  public PageComponentTypePb componentType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGE_PATH((short)1, "pagePath"),
    ID((short)2, "id"),
    /**
     * 
     * @see PageComponentTypePb
     */
    COMPONENT_TYPE((short)3, "componentType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE_PATH
          return PAGE_PATH;
        case 2: // ID
          return ID;
        case 3: // COMPONENT_TYPE
          return COMPONENT_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PAGE_PATH,_Fields.ID,_Fields.COMPONENT_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE_PATH, new org.apache.thrift.meta_data.FieldMetaData("pagePath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.COMPONENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("componentType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PageComponentTypePb.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PageComponentAddedPb.class, metaDataMap);
  }

  public PageComponentAddedPb() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PageComponentAddedPb(PageComponentAddedPb other) {
    if (other.isSetPagePath()) {
      this.pagePath = other.pagePath;
    }
    if (other.isSetId()) {
      this.id = org.apache.thrift.TBaseHelper.copyBinary(other.id);
    }
    if (other.isSetComponentType()) {
      this.componentType = other.componentType;
    }
  }

  public PageComponentAddedPb deepCopy() {
    return new PageComponentAddedPb(this);
  }

  @Override
  public void clear() {
    this.pagePath = null;
    this.id = null;
    this.componentType = null;
  }

  public String getPagePath() {
    return this.pagePath;
  }

  public PageComponentAddedPb setPagePath(String pagePath) {
    this.pagePath = pagePath;
    return this;
  }

  public void unsetPagePath() {
    this.pagePath = null;
  }

  /** Returns true if field pagePath is set (has been assigned a value) and false otherwise */
  public boolean isSetPagePath() {
    return this.pagePath != null;
  }

  public void setPagePathIsSet(boolean value) {
    if (!value) {
      this.pagePath = null;
    }
  }

  public byte[] getId() {
    setId(org.apache.thrift.TBaseHelper.rightSize(id));
    return id == null ? null : id.array();
  }

  public ByteBuffer bufferForId() {
    return org.apache.thrift.TBaseHelper.copyBinary(id);
  }

  public PageComponentAddedPb setId(byte[] id) {
    this.id = id == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(id, id.length));
    return this;
  }

  public PageComponentAddedPb setId(ByteBuffer id) {
    this.id = org.apache.thrift.TBaseHelper.copyBinary(id);
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * 
   * @see PageComponentTypePb
   */
  public PageComponentTypePb getComponentType() {
    return this.componentType;
  }

  /**
   * 
   * @see PageComponentTypePb
   */
  public PageComponentAddedPb setComponentType(PageComponentTypePb componentType) {
    this.componentType = componentType;
    return this;
  }

  public void unsetComponentType() {
    this.componentType = null;
  }

  /** Returns true if field componentType is set (has been assigned a value) and false otherwise */
  public boolean isSetComponentType() {
    return this.componentType != null;
  }

  public void setComponentTypeIsSet(boolean value) {
    if (!value) {
      this.componentType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE_PATH:
      if (value == null) {
        unsetPagePath();
      } else {
        setPagePath((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((ByteBuffer)value);
      }
      break;

    case COMPONENT_TYPE:
      if (value == null) {
        unsetComponentType();
      } else {
        setComponentType((PageComponentTypePb)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE_PATH:
      return getPagePath();

    case ID:
      return getId();

    case COMPONENT_TYPE:
      return getComponentType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE_PATH:
      return isSetPagePath();
    case ID:
      return isSetId();
    case COMPONENT_TYPE:
      return isSetComponentType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PageComponentAddedPb)
      return this.equals((PageComponentAddedPb)that);
    return false;
  }

  public boolean equals(PageComponentAddedPb that) {
    if (that == null)
      return false;

    boolean this_present_pagePath = true && this.isSetPagePath();
    boolean that_present_pagePath = true && that.isSetPagePath();
    if (this_present_pagePath || that_present_pagePath) {
      if (!(this_present_pagePath && that_present_pagePath))
        return false;
      if (!this.pagePath.equals(that.pagePath))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_componentType = true && this.isSetComponentType();
    boolean that_present_componentType = true && that.isSetComponentType();
    if (this_present_componentType || that_present_componentType) {
      if (!(this_present_componentType && that_present_componentType))
        return false;
      if (!this.componentType.equals(that.componentType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pagePath = true && (isSetPagePath());
    list.add(present_pagePath);
    if (present_pagePath)
      list.add(pagePath);

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_componentType = true && (isSetComponentType());
    list.add(present_componentType);
    if (present_componentType)
      list.add(componentType.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(PageComponentAddedPb other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPagePath()).compareTo(other.isSetPagePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPagePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagePath, other.pagePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComponentType()).compareTo(other.isSetComponentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComponentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentType, other.componentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PageComponentAddedPb(");
    boolean first = true;

    if (isSetPagePath()) {
      sb.append("pagePath:");
      if (this.pagePath == null) {
        sb.append("null");
      } else {
        sb.append(this.pagePath);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.id, sb);
      }
      first = false;
    }
    if (isSetComponentType()) {
      if (!first) sb.append(", ");
      sb.append("componentType:");
      if (this.componentType == null) {
        sb.append("null");
      } else {
        sb.append(this.componentType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PageComponentAddedPbStandardSchemeFactory implements SchemeFactory {
    public PageComponentAddedPbStandardScheme getScheme() {
      return new PageComponentAddedPbStandardScheme();
    }
  }

  private static class PageComponentAddedPbStandardScheme extends StandardScheme<PageComponentAddedPb> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PageComponentAddedPb struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pagePath = iprot.readString();
              struct.setPagePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readBinary();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPONENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.componentType = com.komanov.serialization.domain.thrift.PageComponentTypePb.findByValue(iprot.readI32());
              struct.setComponentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PageComponentAddedPb struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pagePath != null) {
        if (struct.isSetPagePath()) {
          oprot.writeFieldBegin(PAGE_PATH_FIELD_DESC);
          oprot.writeString(struct.pagePath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeBinary(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.componentType != null) {
        if (struct.isSetComponentType()) {
          oprot.writeFieldBegin(COMPONENT_TYPE_FIELD_DESC);
          oprot.writeI32(struct.componentType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PageComponentAddedPbTupleSchemeFactory implements SchemeFactory {
    public PageComponentAddedPbTupleScheme getScheme() {
      return new PageComponentAddedPbTupleScheme();
    }
  }

  private static class PageComponentAddedPbTupleScheme extends TupleScheme<PageComponentAddedPb> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PageComponentAddedPb struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPagePath()) {
        optionals.set(0);
      }
      if (struct.isSetId()) {
        optionals.set(1);
      }
      if (struct.isSetComponentType()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPagePath()) {
        oprot.writeString(struct.pagePath);
      }
      if (struct.isSetId()) {
        oprot.writeBinary(struct.id);
      }
      if (struct.isSetComponentType()) {
        oprot.writeI32(struct.componentType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PageComponentAddedPb struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.pagePath = iprot.readString();
        struct.setPagePathIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id = iprot.readBinary();
        struct.setIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.componentType = com.komanov.serialization.domain.thrift.PageComponentTypePb.findByValue(iprot.readI32());
        struct.setComponentTypeIsSet(true);
      }
    }
  }

}

