/**
 * Generated by Scrooge
 *   version: 4.7.0
 *   rev: d9d56174937f524a1981b38ebd6280eef7eeda4a
 *   built at: 20160427-121531
 */
package com.komanov.serialization.domain.thriftscala

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo,
  ThriftStructMetaData, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object PagePb extends ThriftStructCodec3[PagePb] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("PagePb")
  val NameField = new TField("name", TType.STRING, 1)
  val NameFieldManifest = implicitly[Manifest[String]]
  val PathField = new TField("path", TType.STRING, 2)
  val PathFieldManifest = implicitly[Manifest[String]]
  val MetaTagsField = new TField("metaTags", TType.LIST, 3)
  val MetaTagsFieldManifest = implicitly[Manifest[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]]]
  val ComponentsField = new TField("components", TType.LIST, 4)
  val ComponentsFieldManifest = implicitly[Manifest[Seq[com.komanov.serialization.domain.thriftscala.PageComponentPb]]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      NameField,
      true,
      false,
      NameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      PathField,
      true,
      false,
      PathFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      MetaTagsField,
      true,
      false,
      MetaTagsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[com.komanov.serialization.domain.thriftscala.MetaTagPb]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      ComponentsField,
      true,
      false,
      ComponentsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[com.komanov.serialization.domain.thriftscala.PageComponentPb]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: PagePb): Unit = {
  }

  def withoutPassthroughFields(original: PagePb): PagePb =
    new Immutable(
      name =
        {
          val field = original.name
          field.map { field =>
            field
          }
        },
      path =
        {
          val field = original.path
          field.map { field =>
            field
          }
        },
      metaTags =
        {
          val field = original.metaTags
          field.map { field =>
            field.map { field =>
              com.komanov.serialization.domain.thriftscala.MetaTagPb.withoutPassthroughFields(field)
            }
          }
        },
      components =
        {
          val field = original.components
          field.map { field =>
            field.map { field =>
              com.komanov.serialization.domain.thriftscala.PageComponentPb.withoutPassthroughFields(field)
            }
          }
        }
    )

  override def encode(_item: PagePb, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }

  private[this] def lazyDecode(_iprot: LazyTProtocol): PagePb = {

    var nameOffset: Int = -1
    var pathOffset: Int = -1
    var metaTags: Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]] = None
    var components: Option[Seq[com.komanov.serialization.domain.thriftscala.PageComponentPb]] = None

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                nameOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'name' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                pathOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'path' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.LIST =>
    
                metaTags = Some(readMetaTagsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'metaTags' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.LIST =>
    
                components = Some(readComponentsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'components' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      nameOffset,
      pathOffset,
      metaTags,
      components,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): PagePb =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[this] def eagerDecode(_iprot: TProtocol): PagePb = {
    var name: _root_.scala.Option[String] = _root_.scala.None
    var path: _root_.scala.Option[String] = _root_.scala.None
    var metaTags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]] = _root_.scala.None
    var components: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.PageComponentPb]] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                name = _root_.scala.Some(readNameValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'name' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                path = _root_.scala.Some(readPathValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'path' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.LIST =>
                metaTags = _root_.scala.Some(readMetaTagsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'metaTags' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.LIST =>
                components = _root_.scala.Some(readComponentsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'components' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      name,
      path,
      metaTags,
      components,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    name: _root_.scala.Option[String] = _root_.scala.None,
    path: _root_.scala.Option[String] = _root_.scala.None,
    metaTags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]] = _root_.scala.None,
    components: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.PageComponentPb]] = _root_.scala.None
  ): PagePb =
    new Immutable(
      name,
      path,
      metaTags,
      components
    )

  def unapply(_item: PagePb): _root_.scala.Option[scala.Product4[Option[String], Option[String], Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]], Option[Seq[com.komanov.serialization.domain.thriftscala.PageComponentPb]]]] = _root_.scala.Some(_item)


  @inline private def readNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeNameField(name_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(NameField)
    writeNameValue(name_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeNameValue(name_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(name_item)
  }

  @inline private def readPathValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writePathField(path_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(PathField)
    writePathValue(path_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writePathValue(path_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(path_item)
  }

  @inline private def readMetaTagsValue(_iprot: TProtocol): Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[com.komanov.serialization.domain.thriftscala.MetaTagPb](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          com.komanov.serialization.domain.thriftscala.MetaTagPb.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeMetaTagsField(metaTags_item: Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MetaTagsField)
    writeMetaTagsValue(metaTags_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMetaTagsValue(metaTags_item: Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, metaTags_item.size))
    metaTags_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = metaTags_item.size
        while (_i < _size) {
          val metaTags_item_element = metaTags_item(_i)
          metaTags_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        metaTags_item.foreach { metaTags_item_element =>
          metaTags_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private def readComponentsValue(_iprot: TProtocol): Seq[com.komanov.serialization.domain.thriftscala.PageComponentPb] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[com.komanov.serialization.domain.thriftscala.PageComponentPb](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          com.komanov.serialization.domain.thriftscala.PageComponentPb.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeComponentsField(components_item: Seq[com.komanov.serialization.domain.thriftscala.PageComponentPb], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ComponentsField)
    writeComponentsValue(components_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeComponentsValue(components_item: Seq[com.komanov.serialization.domain.thriftscala.PageComponentPb], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, components_item.size))
    components_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = components_item.size
        while (_i < _size) {
          val components_item_element = components_item(_i)
          components_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        components_item.foreach { components_item_element =>
          components_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }


  object Immutable extends ThriftStructCodec3[PagePb] {
    override def encode(_item: PagePb, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): PagePb = PagePb.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[PagePb] = PagePb.metaData
  }

  /**
   * The default read-only implementation of PagePb.  You typically should not need to
   * directly reference this class; instead, use the PagePb.apply method to construct
   * new instances.
   */
  class Immutable(
      val name: _root_.scala.Option[String],
      val path: _root_.scala.Option[String],
      val metaTags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]],
      val components: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.PageComponentPb]],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends PagePb {
    def this(
      name: _root_.scala.Option[String] = _root_.scala.None,
      path: _root_.scala.Option[String] = _root_.scala.None,
      metaTags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]] = _root_.scala.None,
      components: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.PageComponentPb]] = _root_.scala.None
    ) = this(
      name,
      path,
      metaTags,
      components,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      nameOffset: Int,
      pathOffset: Int,
      val metaTags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]],
      val components: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.PageComponentPb]],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends PagePb {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val name: _root_.scala.Option[String] =
      if (nameOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, nameOffset))
      }
    lazy val path: _root_.scala.Option[String] =
      if (pathOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, pathOffset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the PagePb trait with additional state or
   * behavior and implement the read-only methods from PagePb using an underlying
   * instance.
   */
  trait Proxy extends PagePb {
    protected def _underlying_PagePb: PagePb
    override def name: _root_.scala.Option[String] = _underlying_PagePb.name
    override def path: _root_.scala.Option[String] = _underlying_PagePb.path
    override def metaTags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]] = _underlying_PagePb.metaTags
    override def components: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.PageComponentPb]] = _underlying_PagePb.components
    override def _passthroughFields = _underlying_PagePb._passthroughFields
  }
}

trait PagePb
  extends ThriftStruct
  with scala.Product4[Option[String], Option[String], Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]], Option[Seq[com.komanov.serialization.domain.thriftscala.PageComponentPb]]]
  with java.io.Serializable
{
  import PagePb._

  def name: _root_.scala.Option[String]
  def path: _root_.scala.Option[String]
  def metaTags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]]
  def components: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.PageComponentPb]]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = name
  def _2 = path
  def _3 = metaTags
  def _4 = components


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (name.isDefined) {
                writeNameValue(name.get, _oprot)
                _root_.scala.Some(PagePb.NameField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (path.isDefined) {
                writePathValue(path.get, _oprot)
                _root_.scala.Some(PagePb.PathField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (metaTags.isDefined) {
                writeMetaTagsValue(metaTags.get, _oprot)
                _root_.scala.Some(PagePb.MetaTagsField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (components.isDefined) {
                writeComponentsValue(components.get, _oprot)
                _root_.scala.Some(PagePb.ComponentsField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
            _root_.scala.Some(TFieldBlob(_field, _data))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): PagePb = {
    var name: _root_.scala.Option[String] = this.name
    var path: _root_.scala.Option[String] = this.path
    var metaTags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]] = this.metaTags
    var components: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.PageComponentPb]] = this.components
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        name = _root_.scala.Some(readNameValue(_blob.read))
      case 2 =>
        path = _root_.scala.Some(readPathValue(_blob.read))
      case 3 =>
        metaTags = _root_.scala.Some(readMetaTagsValue(_blob.read))
      case 4 =>
        components = _root_.scala.Some(readComponentsValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      name,
      path,
      metaTags,
      components,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): PagePb = {
    var name: _root_.scala.Option[String] = this.name
    var path: _root_.scala.Option[String] = this.path
    var metaTags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]] = this.metaTags
    var components: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.PageComponentPb]] = this.components

    _fieldId match {
      case 1 =>
        name = _root_.scala.None
      case 2 =>
        path = _root_.scala.None
      case 3 =>
        metaTags = _root_.scala.None
      case 4 =>
        components = _root_.scala.None
      case _ =>
    }
    new Immutable(
      name,
      path,
      metaTags,
      components,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetName: PagePb = unsetField(1)

  def unsetPath: PagePb = unsetField(2)

  def unsetMetaTags: PagePb = unsetField(3)

  def unsetComponents: PagePb = unsetField(4)


  override def write(_oprot: TProtocol): Unit = {
    PagePb.validate(this)
    _oprot.writeStructBegin(Struct)
    if (name.isDefined) writeNameField(name.get, _oprot)
    if (path.isDefined) writePathField(path.get, _oprot)
    if (metaTags.isDefined) writeMetaTagsField(metaTags.get, _oprot)
    if (components.isDefined) writeComponentsField(components.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    name: _root_.scala.Option[String] = this.name,
    path: _root_.scala.Option[String] = this.path,
    metaTags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]] = this.metaTags,
    components: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.PageComponentPb]] = this.components,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): PagePb =
    new Immutable(
      name,
      path,
      metaTags,
      components,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[PagePb]

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[PagePb]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => this.name
    case 1 => this.path
    case 2 => this.metaTags
    case 3 => this.components
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "PagePb"
}