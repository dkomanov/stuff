/**
 * Generated by Scrooge
 *   version: 4.7.0
 *   rev: d9d56174937f524a1981b38ebd6280eef7eeda4a
 *   built at: 20160427-121531
 */
package com.komanov.serialization.domain.thriftscala

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo,
  ThriftStructMetaData, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object SitePb extends ThriftStructCodec3[SitePb] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("SitePb")
  val IdField = new TField("id", TType.STRING, 1)
  val IdFieldManifest = implicitly[Manifest[ByteBuffer]]
  val OwnerIdField = new TField("ownerId", TType.STRING, 2)
  val OwnerIdFieldManifest = implicitly[Manifest[ByteBuffer]]
  val RevisionField = new TField("revision", TType.I64, 3)
  val RevisionFieldManifest = implicitly[Manifest[Long]]
  val SiteTypeField = new TField("siteType", TType.ENUM, 4)
  val SiteTypeFieldI32 = new TField("siteType", TType.I32, 4)
  val SiteTypeFieldManifest = implicitly[Manifest[com.komanov.serialization.domain.thriftscala.SiteTypePb]]
  val FlagsField = new TField("flags", TType.LIST, 5)
  val FlagsFieldManifest = implicitly[Manifest[Seq[com.komanov.serialization.domain.thriftscala.SiteFlagPb]]]
  val NameField = new TField("name", TType.STRING, 6)
  val NameFieldManifest = implicitly[Manifest[String]]
  val DescriptionField = new TField("description", TType.STRING, 7)
  val DescriptionFieldManifest = implicitly[Manifest[String]]
  val DomainsField = new TField("domains", TType.LIST, 8)
  val DomainsFieldManifest = implicitly[Manifest[Seq[com.komanov.serialization.domain.thriftscala.DomainPb]]]
  val DefaultMetaTagsField = new TField("defaultMetaTags", TType.LIST, 9)
  val DefaultMetaTagsFieldManifest = implicitly[Manifest[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]]]
  val PagesField = new TField("pages", TType.LIST, 10)
  val PagesFieldManifest = implicitly[Manifest[Seq[com.komanov.serialization.domain.thriftscala.PagePb]]]
  val EntryPointsField = new TField("entryPoints", TType.LIST, 11)
  val EntryPointsFieldManifest = implicitly[Manifest[Seq[com.komanov.serialization.domain.thriftscala.EntryPointPb]]]
  val PublishedField = new TField("published", TType.BOOL, 12)
  val PublishedFieldManifest = implicitly[Manifest[Boolean]]
  val DateCreatedField = new TField("dateCreated", TType.I64, 13)
  val DateCreatedFieldManifest = implicitly[Manifest[Long]]
  val DateUpdatedField = new TField("dateUpdated", TType.I64, 14)
  val DateUpdatedFieldManifest = implicitly[Manifest[Long]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      IdField,
      true,
      false,
      IdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      OwnerIdField,
      true,
      false,
      OwnerIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      RevisionField,
      true,
      false,
      RevisionFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      SiteTypeField,
      true,
      false,
      SiteTypeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      FlagsField,
      true,
      false,
      FlagsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[com.komanov.serialization.domain.thriftscala.SiteFlagPb]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      NameField,
      true,
      false,
      NameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      DescriptionField,
      true,
      false,
      DescriptionFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      DomainsField,
      true,
      false,
      DomainsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[com.komanov.serialization.domain.thriftscala.DomainPb]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      DefaultMetaTagsField,
      true,
      false,
      DefaultMetaTagsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[com.komanov.serialization.domain.thriftscala.MetaTagPb]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      PagesField,
      true,
      false,
      PagesFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[com.komanov.serialization.domain.thriftscala.PagePb]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      EntryPointsField,
      true,
      false,
      EntryPointsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[com.komanov.serialization.domain.thriftscala.EntryPointPb]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      PublishedField,
      true,
      false,
      PublishedFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      DateCreatedField,
      true,
      false,
      DateCreatedFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      DateUpdatedField,
      true,
      false,
      DateUpdatedFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: SitePb): Unit = {
  }

  def withoutPassthroughFields(original: SitePb): SitePb =
    new Immutable(
      id =
        {
          val field = original.id
          field.map { field =>
            field
          }
        },
      ownerId =
        {
          val field = original.ownerId
          field.map { field =>
            field
          }
        },
      revision =
        {
          val field = original.revision
          field.map { field =>
            field
          }
        },
      siteType =
        {
          val field = original.siteType
          field.map { field =>
            field
          }
        },
      flags =
        {
          val field = original.flags
          field.map { field =>
            field.map { field =>
              field
            }
          }
        },
      name =
        {
          val field = original.name
          field.map { field =>
            field
          }
        },
      description =
        {
          val field = original.description
          field.map { field =>
            field
          }
        },
      domains =
        {
          val field = original.domains
          field.map { field =>
            field.map { field =>
              com.komanov.serialization.domain.thriftscala.DomainPb.withoutPassthroughFields(field)
            }
          }
        },
      defaultMetaTags =
        {
          val field = original.defaultMetaTags
          field.map { field =>
            field.map { field =>
              com.komanov.serialization.domain.thriftscala.MetaTagPb.withoutPassthroughFields(field)
            }
          }
        },
      pages =
        {
          val field = original.pages
          field.map { field =>
            field.map { field =>
              com.komanov.serialization.domain.thriftscala.PagePb.withoutPassthroughFields(field)
            }
          }
        },
      entryPoints =
        {
          val field = original.entryPoints
          field.map { field =>
            field.map { field =>
              com.komanov.serialization.domain.thriftscala.EntryPointPb.withoutPassthroughFields(field)
            }
          }
        },
      published =
        {
          val field = original.published
          field.map { field =>
            field
          }
        },
      dateCreated =
        {
          val field = original.dateCreated
          field.map { field =>
            field
          }
        },
      dateUpdated =
        {
          val field = original.dateUpdated
          field.map { field =>
            field
          }
        }
    )

  override def encode(_item: SitePb, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }

  private[this] def lazyDecode(_iprot: LazyTProtocol): SitePb = {

    var id: Option[ByteBuffer] = None
    var ownerId: Option[ByteBuffer] = None
    var revisionOffset: Int = -1
    var siteType: Option[com.komanov.serialization.domain.thriftscala.SiteTypePb] = None
    var flags: Option[Seq[com.komanov.serialization.domain.thriftscala.SiteFlagPb]] = None
    var nameOffset: Int = -1
    var descriptionOffset: Int = -1
    var domains: Option[Seq[com.komanov.serialization.domain.thriftscala.DomainPb]] = None
    var defaultMetaTags: Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]] = None
    var pages: Option[Seq[com.komanov.serialization.domain.thriftscala.PagePb]] = None
    var entryPoints: Option[Seq[com.komanov.serialization.domain.thriftscala.EntryPointPb]] = None
    var publishedOffset: Int = -1
    var dateCreatedOffset: Int = -1
    var dateUpdatedOffset: Int = -1

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
    
                id = Some(readIdValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'id' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
    
                ownerId = Some(readOwnerIdValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'ownerId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I64 =>
                revisionOffset = _iprot.offsetSkipI64
    
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'revision' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
    
                siteType = Some(readSiteTypeValue(_iprot))
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'siteType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.LIST =>
    
                flags = Some(readFlagsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'flags' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                nameOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'name' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.STRING =>
                descriptionOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'description' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.LIST =>
    
                domains = Some(readDomainsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'domains' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.LIST =>
    
                defaultMetaTags = Some(readDefaultMetaTagsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'defaultMetaTags' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 10 =>
            _field.`type` match {
              case TType.LIST =>
    
                pages = Some(readPagesValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'pages' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 11 =>
            _field.`type` match {
              case TType.LIST =>
    
                entryPoints = Some(readEntryPointsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'entryPoints' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 12 =>
            _field.`type` match {
              case TType.BOOL =>
                publishedOffset = _iprot.offsetSkipBool
    
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'published' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 13 =>
            _field.`type` match {
              case TType.I64 =>
                dateCreatedOffset = _iprot.offsetSkipI64
    
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'dateCreated' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 14 =>
            _field.`type` match {
              case TType.I64 =>
                dateUpdatedOffset = _iprot.offsetSkipI64
    
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'dateUpdated' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      id,
      ownerId,
      revisionOffset,
      siteType,
      flags,
      nameOffset,
      descriptionOffset,
      domains,
      defaultMetaTags,
      pages,
      entryPoints,
      publishedOffset,
      dateCreatedOffset,
      dateUpdatedOffset,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): SitePb =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[this] def eagerDecode(_iprot: TProtocol): SitePb = {
    var id: _root_.scala.Option[ByteBuffer] = _root_.scala.None
    var ownerId: _root_.scala.Option[ByteBuffer] = _root_.scala.None
    var revision: _root_.scala.Option[Long] = _root_.scala.None
    var siteType: _root_.scala.Option[com.komanov.serialization.domain.thriftscala.SiteTypePb] = _root_.scala.None
    var flags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.SiteFlagPb]] = _root_.scala.None
    var name: _root_.scala.Option[String] = _root_.scala.None
    var description: _root_.scala.Option[String] = _root_.scala.None
    var domains: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.DomainPb]] = _root_.scala.None
    var defaultMetaTags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]] = _root_.scala.None
    var pages: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.PagePb]] = _root_.scala.None
    var entryPoints: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.EntryPointPb]] = _root_.scala.None
    var published: _root_.scala.Option[Boolean] = _root_.scala.None
    var dateCreated: _root_.scala.Option[Long] = _root_.scala.None
    var dateUpdated: _root_.scala.Option[Long] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                id = _root_.scala.Some(readIdValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'id' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                ownerId = _root_.scala.Some(readOwnerIdValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'ownerId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I64 =>
                revision = _root_.scala.Some(readRevisionValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'revision' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
                siteType = _root_.scala.Some(readSiteTypeValue(_iprot))
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'siteType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.LIST =>
                flags = _root_.scala.Some(readFlagsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'flags' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                name = _root_.scala.Some(readNameValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'name' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.STRING =>
                description = _root_.scala.Some(readDescriptionValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'description' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.LIST =>
                domains = _root_.scala.Some(readDomainsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'domains' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.LIST =>
                defaultMetaTags = _root_.scala.Some(readDefaultMetaTagsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'defaultMetaTags' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 10 =>
            _field.`type` match {
              case TType.LIST =>
                pages = _root_.scala.Some(readPagesValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'pages' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 11 =>
            _field.`type` match {
              case TType.LIST =>
                entryPoints = _root_.scala.Some(readEntryPointsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'entryPoints' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 12 =>
            _field.`type` match {
              case TType.BOOL =>
                published = _root_.scala.Some(readPublishedValue(_iprot))
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'published' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 13 =>
            _field.`type` match {
              case TType.I64 =>
                dateCreated = _root_.scala.Some(readDateCreatedValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'dateCreated' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 14 =>
            _field.`type` match {
              case TType.I64 =>
                dateUpdated = _root_.scala.Some(readDateUpdatedValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'dateUpdated' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      id,
      ownerId,
      revision,
      siteType,
      flags,
      name,
      description,
      domains,
      defaultMetaTags,
      pages,
      entryPoints,
      published,
      dateCreated,
      dateUpdated,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    id: _root_.scala.Option[ByteBuffer] = _root_.scala.None,
    ownerId: _root_.scala.Option[ByteBuffer] = _root_.scala.None,
    revision: _root_.scala.Option[Long] = _root_.scala.None,
    siteType: _root_.scala.Option[com.komanov.serialization.domain.thriftscala.SiteTypePb] = _root_.scala.None,
    flags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.SiteFlagPb]] = _root_.scala.None,
    name: _root_.scala.Option[String] = _root_.scala.None,
    description: _root_.scala.Option[String] = _root_.scala.None,
    domains: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.DomainPb]] = _root_.scala.None,
    defaultMetaTags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]] = _root_.scala.None,
    pages: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.PagePb]] = _root_.scala.None,
    entryPoints: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.EntryPointPb]] = _root_.scala.None,
    published: _root_.scala.Option[Boolean] = _root_.scala.None,
    dateCreated: _root_.scala.Option[Long] = _root_.scala.None,
    dateUpdated: _root_.scala.Option[Long] = _root_.scala.None
  ): SitePb =
    new Immutable(
      id,
      ownerId,
      revision,
      siteType,
      flags,
      name,
      description,
      domains,
      defaultMetaTags,
      pages,
      entryPoints,
      published,
      dateCreated,
      dateUpdated
    )

  def unapply(_item: SitePb): _root_.scala.Option[scala.Product14[Option[ByteBuffer], Option[ByteBuffer], Option[Long], Option[com.komanov.serialization.domain.thriftscala.SiteTypePb], Option[Seq[com.komanov.serialization.domain.thriftscala.SiteFlagPb]], Option[String], Option[String], Option[Seq[com.komanov.serialization.domain.thriftscala.DomainPb]], Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]], Option[Seq[com.komanov.serialization.domain.thriftscala.PagePb]], Option[Seq[com.komanov.serialization.domain.thriftscala.EntryPointPb]], Option[Boolean], Option[Long], Option[Long]]] = _root_.scala.Some(_item)


  @inline private def readIdValue(_iprot: TProtocol): ByteBuffer = {
    _iprot.readBinary()
  }

  @inline private def writeIdField(id_item: ByteBuffer, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(IdField)
    writeIdValue(id_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeIdValue(id_item: ByteBuffer, _oprot: TProtocol): Unit = {
    _oprot.writeBinary(id_item)
  }

  @inline private def readOwnerIdValue(_iprot: TProtocol): ByteBuffer = {
    _iprot.readBinary()
  }

  @inline private def writeOwnerIdField(ownerId_item: ByteBuffer, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(OwnerIdField)
    writeOwnerIdValue(ownerId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeOwnerIdValue(ownerId_item: ByteBuffer, _oprot: TProtocol): Unit = {
    _oprot.writeBinary(ownerId_item)
  }

  @inline private def readRevisionValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeRevisionField(revision_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(RevisionField)
    writeRevisionValue(revision_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeRevisionValue(revision_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(revision_item)
  }

  @inline private def readSiteTypeValue(_iprot: TProtocol): com.komanov.serialization.domain.thriftscala.SiteTypePb = {
    com.komanov.serialization.domain.thriftscala.SiteTypePb.getOrUnknown(_iprot.readI32())
  }

  @inline private def writeSiteTypeField(siteType_item: com.komanov.serialization.domain.thriftscala.SiteTypePb, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(SiteTypeFieldI32)
    writeSiteTypeValue(siteType_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeSiteTypeValue(siteType_item: com.komanov.serialization.domain.thriftscala.SiteTypePb, _oprot: TProtocol): Unit = {
    _oprot.writeI32(siteType_item.value)
  }

  @inline private def readFlagsValue(_iprot: TProtocol): Seq[com.komanov.serialization.domain.thriftscala.SiteFlagPb] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[com.komanov.serialization.domain.thriftscala.SiteFlagPb](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          com.komanov.serialization.domain.thriftscala.SiteFlagPb.getOrUnknown(_iprot.readI32())
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeFlagsField(flags_item: Seq[com.komanov.serialization.domain.thriftscala.SiteFlagPb], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(FlagsField)
    writeFlagsValue(flags_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeFlagsValue(flags_item: Seq[com.komanov.serialization.domain.thriftscala.SiteFlagPb], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.I32, flags_item.size))
    flags_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = flags_item.size
        while (_i < _size) {
          val flags_item_element = flags_item(_i)
          _oprot.writeI32(flags_item_element.value)
          _i += 1
        }
      case _ =>
        flags_item.foreach { flags_item_element =>
          _oprot.writeI32(flags_item_element.value)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private def readNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeNameField(name_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(NameField)
    writeNameValue(name_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeNameValue(name_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(name_item)
  }

  @inline private def readDescriptionValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeDescriptionField(description_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(DescriptionField)
    writeDescriptionValue(description_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeDescriptionValue(description_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(description_item)
  }

  @inline private def readDomainsValue(_iprot: TProtocol): Seq[com.komanov.serialization.domain.thriftscala.DomainPb] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[com.komanov.serialization.domain.thriftscala.DomainPb](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          com.komanov.serialization.domain.thriftscala.DomainPb.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeDomainsField(domains_item: Seq[com.komanov.serialization.domain.thriftscala.DomainPb], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(DomainsField)
    writeDomainsValue(domains_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeDomainsValue(domains_item: Seq[com.komanov.serialization.domain.thriftscala.DomainPb], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, domains_item.size))
    domains_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = domains_item.size
        while (_i < _size) {
          val domains_item_element = domains_item(_i)
          domains_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        domains_item.foreach { domains_item_element =>
          domains_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private def readDefaultMetaTagsValue(_iprot: TProtocol): Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[com.komanov.serialization.domain.thriftscala.MetaTagPb](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          com.komanov.serialization.domain.thriftscala.MetaTagPb.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeDefaultMetaTagsField(defaultMetaTags_item: Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(DefaultMetaTagsField)
    writeDefaultMetaTagsValue(defaultMetaTags_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeDefaultMetaTagsValue(defaultMetaTags_item: Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, defaultMetaTags_item.size))
    defaultMetaTags_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = defaultMetaTags_item.size
        while (_i < _size) {
          val defaultMetaTags_item_element = defaultMetaTags_item(_i)
          defaultMetaTags_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        defaultMetaTags_item.foreach { defaultMetaTags_item_element =>
          defaultMetaTags_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private def readPagesValue(_iprot: TProtocol): Seq[com.komanov.serialization.domain.thriftscala.PagePb] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[com.komanov.serialization.domain.thriftscala.PagePb](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          com.komanov.serialization.domain.thriftscala.PagePb.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writePagesField(pages_item: Seq[com.komanov.serialization.domain.thriftscala.PagePb], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(PagesField)
    writePagesValue(pages_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writePagesValue(pages_item: Seq[com.komanov.serialization.domain.thriftscala.PagePb], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, pages_item.size))
    pages_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = pages_item.size
        while (_i < _size) {
          val pages_item_element = pages_item(_i)
          pages_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        pages_item.foreach { pages_item_element =>
          pages_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private def readEntryPointsValue(_iprot: TProtocol): Seq[com.komanov.serialization.domain.thriftscala.EntryPointPb] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[com.komanov.serialization.domain.thriftscala.EntryPointPb](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          com.komanov.serialization.domain.thriftscala.EntryPointPb.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeEntryPointsField(entryPoints_item: Seq[com.komanov.serialization.domain.thriftscala.EntryPointPb], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(EntryPointsField)
    writeEntryPointsValue(entryPoints_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeEntryPointsValue(entryPoints_item: Seq[com.komanov.serialization.domain.thriftscala.EntryPointPb], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, entryPoints_item.size))
    entryPoints_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = entryPoints_item.size
        while (_i < _size) {
          val entryPoints_item_element = entryPoints_item(_i)
          entryPoints_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        entryPoints_item.foreach { entryPoints_item_element =>
          entryPoints_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private def readPublishedValue(_iprot: TProtocol): Boolean = {
    _iprot.readBool()
  }

  @inline private def writePublishedField(published_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(PublishedField)
    writePublishedValue(published_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writePublishedValue(published_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeBool(published_item)
  }

  @inline private def readDateCreatedValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeDateCreatedField(dateCreated_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(DateCreatedField)
    writeDateCreatedValue(dateCreated_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeDateCreatedValue(dateCreated_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(dateCreated_item)
  }

  @inline private def readDateUpdatedValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeDateUpdatedField(dateUpdated_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(DateUpdatedField)
    writeDateUpdatedValue(dateUpdated_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeDateUpdatedValue(dateUpdated_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(dateUpdated_item)
  }


  object Immutable extends ThriftStructCodec3[SitePb] {
    override def encode(_item: SitePb, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): SitePb = SitePb.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[SitePb] = SitePb.metaData
  }

  /**
   * The default read-only implementation of SitePb.  You typically should not need to
   * directly reference this class; instead, use the SitePb.apply method to construct
   * new instances.
   */
  class Immutable(
      val id: _root_.scala.Option[ByteBuffer],
      val ownerId: _root_.scala.Option[ByteBuffer],
      val revision: _root_.scala.Option[Long],
      val siteType: _root_.scala.Option[com.komanov.serialization.domain.thriftscala.SiteTypePb],
      val flags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.SiteFlagPb]],
      val name: _root_.scala.Option[String],
      val description: _root_.scala.Option[String],
      val domains: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.DomainPb]],
      val defaultMetaTags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]],
      val pages: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.PagePb]],
      val entryPoints: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.EntryPointPb]],
      val published: _root_.scala.Option[Boolean],
      val dateCreated: _root_.scala.Option[Long],
      val dateUpdated: _root_.scala.Option[Long],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends SitePb {
    def this(
      id: _root_.scala.Option[ByteBuffer] = _root_.scala.None,
      ownerId: _root_.scala.Option[ByteBuffer] = _root_.scala.None,
      revision: _root_.scala.Option[Long] = _root_.scala.None,
      siteType: _root_.scala.Option[com.komanov.serialization.domain.thriftscala.SiteTypePb] = _root_.scala.None,
      flags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.SiteFlagPb]] = _root_.scala.None,
      name: _root_.scala.Option[String] = _root_.scala.None,
      description: _root_.scala.Option[String] = _root_.scala.None,
      domains: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.DomainPb]] = _root_.scala.None,
      defaultMetaTags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]] = _root_.scala.None,
      pages: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.PagePb]] = _root_.scala.None,
      entryPoints: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.EntryPointPb]] = _root_.scala.None,
      published: _root_.scala.Option[Boolean] = _root_.scala.None,
      dateCreated: _root_.scala.Option[Long] = _root_.scala.None,
      dateUpdated: _root_.scala.Option[Long] = _root_.scala.None
    ) = this(
      id,
      ownerId,
      revision,
      siteType,
      flags,
      name,
      description,
      domains,
      defaultMetaTags,
      pages,
      entryPoints,
      published,
      dateCreated,
      dateUpdated,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val id: _root_.scala.Option[ByteBuffer],
      val ownerId: _root_.scala.Option[ByteBuffer],
      revisionOffset: Int,
      val siteType: _root_.scala.Option[com.komanov.serialization.domain.thriftscala.SiteTypePb],
      val flags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.SiteFlagPb]],
      nameOffset: Int,
      descriptionOffset: Int,
      val domains: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.DomainPb]],
      val defaultMetaTags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]],
      val pages: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.PagePb]],
      val entryPoints: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.EntryPointPb]],
      publishedOffset: Int,
      dateCreatedOffset: Int,
      dateUpdatedOffset: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends SitePb {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val revision: _root_.scala.Option[Long] =
      if (revisionOffset == -1)
        None
      else {
        Some(_proto.decodeI64(_buf, revisionOffset))
      }
    lazy val name: _root_.scala.Option[String] =
      if (nameOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, nameOffset))
      }
    lazy val description: _root_.scala.Option[String] =
      if (descriptionOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, descriptionOffset))
      }
    lazy val published: _root_.scala.Option[Boolean] =
      if (publishedOffset == -1)
        None
      else {
        Some(_proto.decodeBool(_buf, publishedOffset))
      }
    lazy val dateCreated: _root_.scala.Option[Long] =
      if (dateCreatedOffset == -1)
        None
      else {
        Some(_proto.decodeI64(_buf, dateCreatedOffset))
      }
    lazy val dateUpdated: _root_.scala.Option[Long] =
      if (dateUpdatedOffset == -1)
        None
      else {
        Some(_proto.decodeI64(_buf, dateUpdatedOffset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the SitePb trait with additional state or
   * behavior and implement the read-only methods from SitePb using an underlying
   * instance.
   */
  trait Proxy extends SitePb {
    protected def _underlying_SitePb: SitePb
    override def id: _root_.scala.Option[ByteBuffer] = _underlying_SitePb.id
    override def ownerId: _root_.scala.Option[ByteBuffer] = _underlying_SitePb.ownerId
    override def revision: _root_.scala.Option[Long] = _underlying_SitePb.revision
    override def siteType: _root_.scala.Option[com.komanov.serialization.domain.thriftscala.SiteTypePb] = _underlying_SitePb.siteType
    override def flags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.SiteFlagPb]] = _underlying_SitePb.flags
    override def name: _root_.scala.Option[String] = _underlying_SitePb.name
    override def description: _root_.scala.Option[String] = _underlying_SitePb.description
    override def domains: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.DomainPb]] = _underlying_SitePb.domains
    override def defaultMetaTags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]] = _underlying_SitePb.defaultMetaTags
    override def pages: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.PagePb]] = _underlying_SitePb.pages
    override def entryPoints: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.EntryPointPb]] = _underlying_SitePb.entryPoints
    override def published: _root_.scala.Option[Boolean] = _underlying_SitePb.published
    override def dateCreated: _root_.scala.Option[Long] = _underlying_SitePb.dateCreated
    override def dateUpdated: _root_.scala.Option[Long] = _underlying_SitePb.dateUpdated
    override def _passthroughFields = _underlying_SitePb._passthroughFields
  }
}

trait SitePb
  extends ThriftStruct
  with scala.Product14[Option[ByteBuffer], Option[ByteBuffer], Option[Long], Option[com.komanov.serialization.domain.thriftscala.SiteTypePb], Option[Seq[com.komanov.serialization.domain.thriftscala.SiteFlagPb]], Option[String], Option[String], Option[Seq[com.komanov.serialization.domain.thriftscala.DomainPb]], Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]], Option[Seq[com.komanov.serialization.domain.thriftscala.PagePb]], Option[Seq[com.komanov.serialization.domain.thriftscala.EntryPointPb]], Option[Boolean], Option[Long], Option[Long]]
  with java.io.Serializable
{
  import SitePb._

  def id: _root_.scala.Option[ByteBuffer]
  def ownerId: _root_.scala.Option[ByteBuffer]
  def revision: _root_.scala.Option[Long]
  def siteType: _root_.scala.Option[com.komanov.serialization.domain.thriftscala.SiteTypePb]
  def flags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.SiteFlagPb]]
  def name: _root_.scala.Option[String]
  def description: _root_.scala.Option[String]
  def domains: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.DomainPb]]
  def defaultMetaTags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]]
  def pages: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.PagePb]]
  def entryPoints: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.EntryPointPb]]
  def published: _root_.scala.Option[Boolean]
  def dateCreated: _root_.scala.Option[Long]
  def dateUpdated: _root_.scala.Option[Long]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = id
  def _2 = ownerId
  def _3 = revision
  def _4 = siteType
  def _5 = flags
  def _6 = name
  def _7 = description
  def _8 = domains
  def _9 = defaultMetaTags
  def _10 = pages
  def _11 = entryPoints
  def _12 = published
  def _13 = dateCreated
  def _14 = dateUpdated


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (id.isDefined) {
                writeIdValue(id.get, _oprot)
                _root_.scala.Some(SitePb.IdField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (ownerId.isDefined) {
                writeOwnerIdValue(ownerId.get, _oprot)
                _root_.scala.Some(SitePb.OwnerIdField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (revision.isDefined) {
                writeRevisionValue(revision.get, _oprot)
                _root_.scala.Some(SitePb.RevisionField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (siteType.isDefined) {
                writeSiteTypeValue(siteType.get, _oprot)
                _root_.scala.Some(SitePb.SiteTypeField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (flags.isDefined) {
                writeFlagsValue(flags.get, _oprot)
                _root_.scala.Some(SitePb.FlagsField)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (name.isDefined) {
                writeNameValue(name.get, _oprot)
                _root_.scala.Some(SitePb.NameField)
              } else {
                _root_.scala.None
              }
            case 7 =>
              if (description.isDefined) {
                writeDescriptionValue(description.get, _oprot)
                _root_.scala.Some(SitePb.DescriptionField)
              } else {
                _root_.scala.None
              }
            case 8 =>
              if (domains.isDefined) {
                writeDomainsValue(domains.get, _oprot)
                _root_.scala.Some(SitePb.DomainsField)
              } else {
                _root_.scala.None
              }
            case 9 =>
              if (defaultMetaTags.isDefined) {
                writeDefaultMetaTagsValue(defaultMetaTags.get, _oprot)
                _root_.scala.Some(SitePb.DefaultMetaTagsField)
              } else {
                _root_.scala.None
              }
            case 10 =>
              if (pages.isDefined) {
                writePagesValue(pages.get, _oprot)
                _root_.scala.Some(SitePb.PagesField)
              } else {
                _root_.scala.None
              }
            case 11 =>
              if (entryPoints.isDefined) {
                writeEntryPointsValue(entryPoints.get, _oprot)
                _root_.scala.Some(SitePb.EntryPointsField)
              } else {
                _root_.scala.None
              }
            case 12 =>
              if (published.isDefined) {
                writePublishedValue(published.get, _oprot)
                _root_.scala.Some(SitePb.PublishedField)
              } else {
                _root_.scala.None
              }
            case 13 =>
              if (dateCreated.isDefined) {
                writeDateCreatedValue(dateCreated.get, _oprot)
                _root_.scala.Some(SitePb.DateCreatedField)
              } else {
                _root_.scala.None
              }
            case 14 =>
              if (dateUpdated.isDefined) {
                writeDateUpdatedValue(dateUpdated.get, _oprot)
                _root_.scala.Some(SitePb.DateUpdatedField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
            _root_.scala.Some(TFieldBlob(_field, _data))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): SitePb = {
    var id: _root_.scala.Option[ByteBuffer] = this.id
    var ownerId: _root_.scala.Option[ByteBuffer] = this.ownerId
    var revision: _root_.scala.Option[Long] = this.revision
    var siteType: _root_.scala.Option[com.komanov.serialization.domain.thriftscala.SiteTypePb] = this.siteType
    var flags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.SiteFlagPb]] = this.flags
    var name: _root_.scala.Option[String] = this.name
    var description: _root_.scala.Option[String] = this.description
    var domains: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.DomainPb]] = this.domains
    var defaultMetaTags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]] = this.defaultMetaTags
    var pages: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.PagePb]] = this.pages
    var entryPoints: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.EntryPointPb]] = this.entryPoints
    var published: _root_.scala.Option[Boolean] = this.published
    var dateCreated: _root_.scala.Option[Long] = this.dateCreated
    var dateUpdated: _root_.scala.Option[Long] = this.dateUpdated
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        id = _root_.scala.Some(readIdValue(_blob.read))
      case 2 =>
        ownerId = _root_.scala.Some(readOwnerIdValue(_blob.read))
      case 3 =>
        revision = _root_.scala.Some(readRevisionValue(_blob.read))
      case 4 =>
        siteType = _root_.scala.Some(readSiteTypeValue(_blob.read))
      case 5 =>
        flags = _root_.scala.Some(readFlagsValue(_blob.read))
      case 6 =>
        name = _root_.scala.Some(readNameValue(_blob.read))
      case 7 =>
        description = _root_.scala.Some(readDescriptionValue(_blob.read))
      case 8 =>
        domains = _root_.scala.Some(readDomainsValue(_blob.read))
      case 9 =>
        defaultMetaTags = _root_.scala.Some(readDefaultMetaTagsValue(_blob.read))
      case 10 =>
        pages = _root_.scala.Some(readPagesValue(_blob.read))
      case 11 =>
        entryPoints = _root_.scala.Some(readEntryPointsValue(_blob.read))
      case 12 =>
        published = _root_.scala.Some(readPublishedValue(_blob.read))
      case 13 =>
        dateCreated = _root_.scala.Some(readDateCreatedValue(_blob.read))
      case 14 =>
        dateUpdated = _root_.scala.Some(readDateUpdatedValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      id,
      ownerId,
      revision,
      siteType,
      flags,
      name,
      description,
      domains,
      defaultMetaTags,
      pages,
      entryPoints,
      published,
      dateCreated,
      dateUpdated,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): SitePb = {
    var id: _root_.scala.Option[ByteBuffer] = this.id
    var ownerId: _root_.scala.Option[ByteBuffer] = this.ownerId
    var revision: _root_.scala.Option[Long] = this.revision
    var siteType: _root_.scala.Option[com.komanov.serialization.domain.thriftscala.SiteTypePb] = this.siteType
    var flags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.SiteFlagPb]] = this.flags
    var name: _root_.scala.Option[String] = this.name
    var description: _root_.scala.Option[String] = this.description
    var domains: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.DomainPb]] = this.domains
    var defaultMetaTags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]] = this.defaultMetaTags
    var pages: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.PagePb]] = this.pages
    var entryPoints: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.EntryPointPb]] = this.entryPoints
    var published: _root_.scala.Option[Boolean] = this.published
    var dateCreated: _root_.scala.Option[Long] = this.dateCreated
    var dateUpdated: _root_.scala.Option[Long] = this.dateUpdated

    _fieldId match {
      case 1 =>
        id = _root_.scala.None
      case 2 =>
        ownerId = _root_.scala.None
      case 3 =>
        revision = _root_.scala.None
      case 4 =>
        siteType = _root_.scala.None
      case 5 =>
        flags = _root_.scala.None
      case 6 =>
        name = _root_.scala.None
      case 7 =>
        description = _root_.scala.None
      case 8 =>
        domains = _root_.scala.None
      case 9 =>
        defaultMetaTags = _root_.scala.None
      case 10 =>
        pages = _root_.scala.None
      case 11 =>
        entryPoints = _root_.scala.None
      case 12 =>
        published = _root_.scala.None
      case 13 =>
        dateCreated = _root_.scala.None
      case 14 =>
        dateUpdated = _root_.scala.None
      case _ =>
    }
    new Immutable(
      id,
      ownerId,
      revision,
      siteType,
      flags,
      name,
      description,
      domains,
      defaultMetaTags,
      pages,
      entryPoints,
      published,
      dateCreated,
      dateUpdated,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetId: SitePb = unsetField(1)

  def unsetOwnerId: SitePb = unsetField(2)

  def unsetRevision: SitePb = unsetField(3)

  def unsetSiteType: SitePb = unsetField(4)

  def unsetFlags: SitePb = unsetField(5)

  def unsetName: SitePb = unsetField(6)

  def unsetDescription: SitePb = unsetField(7)

  def unsetDomains: SitePb = unsetField(8)

  def unsetDefaultMetaTags: SitePb = unsetField(9)

  def unsetPages: SitePb = unsetField(10)

  def unsetEntryPoints: SitePb = unsetField(11)

  def unsetPublished: SitePb = unsetField(12)

  def unsetDateCreated: SitePb = unsetField(13)

  def unsetDateUpdated: SitePb = unsetField(14)


  override def write(_oprot: TProtocol): Unit = {
    SitePb.validate(this)
    _oprot.writeStructBegin(Struct)
    if (id.isDefined) writeIdField(id.get, _oprot)
    if (ownerId.isDefined) writeOwnerIdField(ownerId.get, _oprot)
    if (revision.isDefined) writeRevisionField(revision.get, _oprot)
    if (siteType.isDefined) writeSiteTypeField(siteType.get, _oprot)
    if (flags.isDefined) writeFlagsField(flags.get, _oprot)
    if (name.isDefined) writeNameField(name.get, _oprot)
    if (description.isDefined) writeDescriptionField(description.get, _oprot)
    if (domains.isDefined) writeDomainsField(domains.get, _oprot)
    if (defaultMetaTags.isDefined) writeDefaultMetaTagsField(defaultMetaTags.get, _oprot)
    if (pages.isDefined) writePagesField(pages.get, _oprot)
    if (entryPoints.isDefined) writeEntryPointsField(entryPoints.get, _oprot)
    if (published.isDefined) writePublishedField(published.get, _oprot)
    if (dateCreated.isDefined) writeDateCreatedField(dateCreated.get, _oprot)
    if (dateUpdated.isDefined) writeDateUpdatedField(dateUpdated.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    id: _root_.scala.Option[ByteBuffer] = this.id,
    ownerId: _root_.scala.Option[ByteBuffer] = this.ownerId,
    revision: _root_.scala.Option[Long] = this.revision,
    siteType: _root_.scala.Option[com.komanov.serialization.domain.thriftscala.SiteTypePb] = this.siteType,
    flags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.SiteFlagPb]] = this.flags,
    name: _root_.scala.Option[String] = this.name,
    description: _root_.scala.Option[String] = this.description,
    domains: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.DomainPb]] = this.domains,
    defaultMetaTags: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.MetaTagPb]] = this.defaultMetaTags,
    pages: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.PagePb]] = this.pages,
    entryPoints: _root_.scala.Option[Seq[com.komanov.serialization.domain.thriftscala.EntryPointPb]] = this.entryPoints,
    published: _root_.scala.Option[Boolean] = this.published,
    dateCreated: _root_.scala.Option[Long] = this.dateCreated,
    dateUpdated: _root_.scala.Option[Long] = this.dateUpdated,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): SitePb =
    new Immutable(
      id,
      ownerId,
      revision,
      siteType,
      flags,
      name,
      description,
      domains,
      defaultMetaTags,
      pages,
      entryPoints,
      published,
      dateCreated,
      dateUpdated,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[SitePb]

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[SitePb]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 14

  override def productElement(n: Int): Any = n match {
    case 0 => this.id
    case 1 => this.ownerId
    case 2 => this.revision
    case 3 => this.siteType
    case 4 => this.flags
    case 5 => this.name
    case 6 => this.description
    case 7 => this.domains
    case 8 => this.defaultMetaTags
    case 9 => this.pages
    case 10 => this.entryPoints
    case 11 => this.published
    case 12 => this.dateCreated
    case 13 => this.dateUpdated
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "SitePb"
}