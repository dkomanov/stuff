/**
 * Generated by Scrooge
 *   version: 4.7.0
 *   rev: d9d56174937f524a1981b38ebd6280eef7eeda4a
 *   built at: 20160427-121531
 */
package com.komanov.serialization.domain.thriftscala

import com.twitter.scrooge.ThriftEnum


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
case object SiteFlagPb {
  
  case object UnknownSiteFlag extends com.komanov.serialization.domain.thriftscala.SiteFlagPb {
    val value: Int = 0
    val name: String = "UnknownSiteFlag"
    val originalName: String = "UnknownSiteFlag"
  }

  private[this] val _SomeUnknownSiteFlag = _root_.scala.Some(com.komanov.serialization.domain.thriftscala.SiteFlagPb.UnknownSiteFlag)
  
  case object Free extends com.komanov.serialization.domain.thriftscala.SiteFlagPb {
    val value: Int = 1
    val name: String = "Free"
    val originalName: String = "Free"
  }

  private[this] val _SomeFree = _root_.scala.Some(com.komanov.serialization.domain.thriftscala.SiteFlagPb.Free)
  
  case object Premium extends com.komanov.serialization.domain.thriftscala.SiteFlagPb {
    val value: Int = 2
    val name: String = "Premium"
    val originalName: String = "Premium"
  }

  private[this] val _SomePremium = _root_.scala.Some(com.komanov.serialization.domain.thriftscala.SiteFlagPb.Premium)

  case class EnumUnknownSiteFlagPb(value: Int) extends com.komanov.serialization.domain.thriftscala.SiteFlagPb {
    val name: String = "EnumUnknownSiteFlagPb" + value
    def originalName: String = name
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * @throws NoSuchElementException if the value is not found.
   */
  def apply(value: Int): com.komanov.serialization.domain.thriftscala.SiteFlagPb =
    value match {
      case 0 => com.komanov.serialization.domain.thriftscala.SiteFlagPb.UnknownSiteFlag
      case 1 => com.komanov.serialization.domain.thriftscala.SiteFlagPb.Free
      case 2 => com.komanov.serialization.domain.thriftscala.SiteFlagPb.Premium
      case _ => throw new NoSuchElementException(value.toString)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * returns an EnumUnknownSiteFlagPb(value) if the value is not found.
   * In particular this allows ignoring new values added to an enum
   * in the IDL on the producer side when the consumer was not updated.
   */
  def getOrUnknown(value: Int): com.komanov.serialization.domain.thriftscala.SiteFlagPb =
    get(value) match {
      case _root_.scala.Some(e) => e
      case _root_.scala.None => EnumUnknownSiteFlagPb(value)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): _root_.scala.Option[com.komanov.serialization.domain.thriftscala.SiteFlagPb] =
    value match {
      case 0 => _SomeUnknownSiteFlag
      case 1 => _SomeFree
      case 2 => _SomePremium
      case _ => _root_.scala.None
    }

  def valueOf(name: String): _root_.scala.Option[com.komanov.serialization.domain.thriftscala.SiteFlagPb] =
    name.toLowerCase match {
      case "unknownsiteflag" => _SomeUnknownSiteFlag
      case "free" => _SomeFree
      case "premium" => _SomePremium
      case _ => _root_.scala.None
    }

  lazy val list: List[com.komanov.serialization.domain.thriftscala.SiteFlagPb] = scala.List[com.komanov.serialization.domain.thriftscala.SiteFlagPb](
    com.komanov.serialization.domain.thriftscala.SiteFlagPb.UnknownSiteFlag,
    com.komanov.serialization.domain.thriftscala.SiteFlagPb.Free,
    com.komanov.serialization.domain.thriftscala.SiteFlagPb.Premium
  )
}



@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait SiteFlagPb extends ThriftEnum with Serializable